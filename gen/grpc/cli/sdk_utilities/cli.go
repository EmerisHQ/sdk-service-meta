// Code generated by goa v3.5.2, DO NOT EDIT.
//
// sdk-utilities gRPC client CLI support package
//
// Command:
// $ goa gen github.com/allinbits/sdk-service-meta

package cli

import (
	"flag"
	"fmt"
	"os"

	sdkutilitiesc "github.com/allinbits/sdk-service-meta/gen/grpc/sdk_utilities/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `sdk-utilities (supply|query-tx|broadcast-tx|tx-metadata|auth|bank|delegation|ibc-channel|ibc-client-state|ibc-connection|ibc-denom-trace)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` sdk-utilities supply --message '{
      "chainName": "Sed enim atque dolores esse dicta.",
      "port": 7124529205354848620
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		sdkUtilitiesFlags = flag.NewFlagSet("sdk-utilities", flag.ContinueOnError)

		sdkUtilitiesSupplyFlags       = flag.NewFlagSet("supply", flag.ExitOnError)
		sdkUtilitiesSupplyMessageFlag = sdkUtilitiesSupplyFlags.String("message", "", "")

		sdkUtilitiesQueryTxFlags       = flag.NewFlagSet("query-tx", flag.ExitOnError)
		sdkUtilitiesQueryTxMessageFlag = sdkUtilitiesQueryTxFlags.String("message", "", "")

		sdkUtilitiesBroadcastTxFlags       = flag.NewFlagSet("broadcast-tx", flag.ExitOnError)
		sdkUtilitiesBroadcastTxMessageFlag = sdkUtilitiesBroadcastTxFlags.String("message", "", "")

		sdkUtilitiesTxMetadataFlags       = flag.NewFlagSet("tx-metadata", flag.ExitOnError)
		sdkUtilitiesTxMetadataMessageFlag = sdkUtilitiesTxMetadataFlags.String("message", "", "")

		sdkUtilitiesAuthFlags       = flag.NewFlagSet("auth", flag.ExitOnError)
		sdkUtilitiesAuthMessageFlag = sdkUtilitiesAuthFlags.String("message", "", "")

		sdkUtilitiesBankFlags       = flag.NewFlagSet("bank", flag.ExitOnError)
		sdkUtilitiesBankMessageFlag = sdkUtilitiesBankFlags.String("message", "", "")

		sdkUtilitiesDelegationFlags       = flag.NewFlagSet("delegation", flag.ExitOnError)
		sdkUtilitiesDelegationMessageFlag = sdkUtilitiesDelegationFlags.String("message", "", "")

		sdkUtilitiesIbcChannelFlags       = flag.NewFlagSet("ibc-channel", flag.ExitOnError)
		sdkUtilitiesIbcChannelMessageFlag = sdkUtilitiesIbcChannelFlags.String("message", "", "")

		sdkUtilitiesIbcClientStateFlags       = flag.NewFlagSet("ibc-client-state", flag.ExitOnError)
		sdkUtilitiesIbcClientStateMessageFlag = sdkUtilitiesIbcClientStateFlags.String("message", "", "")

		sdkUtilitiesIbcConnectionFlags       = flag.NewFlagSet("ibc-connection", flag.ExitOnError)
		sdkUtilitiesIbcConnectionMessageFlag = sdkUtilitiesIbcConnectionFlags.String("message", "", "")

		sdkUtilitiesIbcDenomTraceFlags       = flag.NewFlagSet("ibc-denom-trace", flag.ExitOnError)
		sdkUtilitiesIbcDenomTraceMessageFlag = sdkUtilitiesIbcDenomTraceFlags.String("message", "", "")
	)
	sdkUtilitiesFlags.Usage = sdkUtilitiesUsage
	sdkUtilitiesSupplyFlags.Usage = sdkUtilitiesSupplyUsage
	sdkUtilitiesQueryTxFlags.Usage = sdkUtilitiesQueryTxUsage
	sdkUtilitiesBroadcastTxFlags.Usage = sdkUtilitiesBroadcastTxUsage
	sdkUtilitiesTxMetadataFlags.Usage = sdkUtilitiesTxMetadataUsage
	sdkUtilitiesAuthFlags.Usage = sdkUtilitiesAuthUsage
	sdkUtilitiesBankFlags.Usage = sdkUtilitiesBankUsage
	sdkUtilitiesDelegationFlags.Usage = sdkUtilitiesDelegationUsage
	sdkUtilitiesIbcChannelFlags.Usage = sdkUtilitiesIbcChannelUsage
	sdkUtilitiesIbcClientStateFlags.Usage = sdkUtilitiesIbcClientStateUsage
	sdkUtilitiesIbcConnectionFlags.Usage = sdkUtilitiesIbcConnectionUsage
	sdkUtilitiesIbcDenomTraceFlags.Usage = sdkUtilitiesIbcDenomTraceUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "sdk-utilities":
			svcf = sdkUtilitiesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "sdk-utilities":
			switch epn {
			case "supply":
				epf = sdkUtilitiesSupplyFlags

			case "query-tx":
				epf = sdkUtilitiesQueryTxFlags

			case "broadcast-tx":
				epf = sdkUtilitiesBroadcastTxFlags

			case "tx-metadata":
				epf = sdkUtilitiesTxMetadataFlags

			case "auth":
				epf = sdkUtilitiesAuthFlags

			case "bank":
				epf = sdkUtilitiesBankFlags

			case "delegation":
				epf = sdkUtilitiesDelegationFlags

			case "ibc-channel":
				epf = sdkUtilitiesIbcChannelFlags

			case "ibc-client-state":
				epf = sdkUtilitiesIbcClientStateFlags

			case "ibc-connection":
				epf = sdkUtilitiesIbcConnectionFlags

			case "ibc-denom-trace":
				epf = sdkUtilitiesIbcDenomTraceFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "sdk-utilities":
			c := sdkutilitiesc.NewClient(cc, opts...)
			switch epn {
			case "supply":
				endpoint = c.Supply()
				data, err = sdkutilitiesc.BuildSupplyPayload(*sdkUtilitiesSupplyMessageFlag)
			case "query-tx":
				endpoint = c.QueryTx()
				data, err = sdkutilitiesc.BuildQueryTxPayload(*sdkUtilitiesQueryTxMessageFlag)
			case "broadcast-tx":
				endpoint = c.BroadcastTx()
				data, err = sdkutilitiesc.BuildBroadcastTxPayload(*sdkUtilitiesBroadcastTxMessageFlag)
			case "tx-metadata":
				endpoint = c.TxMetadata()
				data, err = sdkutilitiesc.BuildTxMetadataPayload(*sdkUtilitiesTxMetadataMessageFlag)
			case "auth":
				endpoint = c.AuthEndpoint()
				data, err = sdkutilitiesc.BuildAuthEndpointPayload(*sdkUtilitiesAuthMessageFlag)
			case "bank":
				endpoint = c.Bank()
				data, err = sdkutilitiesc.BuildBankPayload(*sdkUtilitiesBankMessageFlag)
			case "delegation":
				endpoint = c.DelegationEndpoint()
				data, err = sdkutilitiesc.BuildDelegationEndpointPayload(*sdkUtilitiesDelegationMessageFlag)
			case "ibc-channel":
				endpoint = c.IbcChannel()
				data, err = sdkutilitiesc.BuildIbcChannelPayload(*sdkUtilitiesIbcChannelMessageFlag)
			case "ibc-client-state":
				endpoint = c.IbcClientState()
				data, err = sdkutilitiesc.BuildIbcClientStatePayload(*sdkUtilitiesIbcClientStateMessageFlag)
			case "ibc-connection":
				endpoint = c.IbcConnection()
				data, err = sdkutilitiesc.BuildIbcConnectionPayload(*sdkUtilitiesIbcConnectionMessageFlag)
			case "ibc-denom-trace":
				endpoint = c.IbcDenomTrace()
				data, err = sdkutilitiesc.BuildIbcDenomTracePayload(*sdkUtilitiesIbcDenomTraceMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// sdk-utilitiesUsage displays the usage of the sdk-utilities command and its
// subcommands.
func sdkUtilitiesUsage() {
	fmt.Fprintf(os.Stderr, `sdk-utilities performs Cosmos SDK-related operations
Usage:
    %[1]s [globalflags] sdk-utilities COMMAND [flags]

COMMAND:
    supply: Supply implements supply.
    query-tx: QueryTx implements queryTx.
    broadcast-tx: BroadcastTx implements broadcastTx.
    tx-metadata: TxMetadata implements txMetadata.
    auth: Auth implements auth.
    bank: Bank implements bank.
    delegation: Delegation implements delegation.
    ibc-channel: IbcChannel implements ibc_channel.
    ibc-client-state: IbcClientState implements ibc_client_state.
    ibc-connection: IbcConnection implements ibc_connection.
    ibc-denom-trace: IbcDenomTrace implements ibc_denom_trace.

Additional help:
    %[1]s sdk-utilities COMMAND --help
`, os.Args[0])
}
func sdkUtilitiesSupplyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities supply -message JSON

Supply implements supply.
    -message JSON: 

Example:
    %[1]s sdk-utilities supply --message '{
      "chainName": "Sed enim atque dolores esse dicta.",
      "port": 7124529205354848620
   }'
`, os.Args[0])
}

func sdkUtilitiesQueryTxUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities query-tx -message JSON

QueryTx implements queryTx.
    -message JSON: 

Example:
    %[1]s sdk-utilities query-tx --message '{
      "chainName": "Explicabo consequatur est ea est.",
      "hash": "Laborum quam ducimus consequatur.",
      "port": 3065905437504226774
   }'
`, os.Args[0])
}

func sdkUtilitiesBroadcastTxUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities broadcast-tx -message JSON

BroadcastTx implements broadcastTx.
    -message JSON: 

Example:
    %[1]s sdk-utilities broadcast-tx --message '{
      "chainName": "Officiis alias.",
      "port": 5526397674056279747,
      "txBytes": "UmVtIHZvbHVwdGFzIHNlZCBpZCBhbWV0IGRpY3RhLg=="
   }'
`, os.Args[0])
}

func sdkUtilitiesTxMetadataUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities tx-metadata -message JSON

TxMetadata implements txMetadata.
    -message JSON: 

Example:
    %[1]s sdk-utilities tx-metadata --message '{
      "txBytes": "UXVpcyBjdWxwYSBldCBibGFuZGl0aWlzIHZlcml0YXRpcyBoYXJ1bSBwb3NzaW11cy4="
   }'
`, os.Args[0])
}

func sdkUtilitiesAuthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities auth -message JSON

Auth implements auth.
    -message JSON: 

Example:
    %[1]s sdk-utilities auth --message '{
      "payload": [
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         }
      ]
   }'
`, os.Args[0])
}

func sdkUtilitiesBankUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities bank -message JSON

Bank implements bank.
    -message JSON: 

Example:
    %[1]s sdk-utilities bank --message '{
      "payload": [
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         }
      ]
   }'
`, os.Args[0])
}

func sdkUtilitiesDelegationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities delegation -message JSON

Delegation implements delegation.
    -message JSON: 

Example:
    %[1]s sdk-utilities delegation --message '{
      "payload": [
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         }
      ]
   }'
`, os.Args[0])
}

func sdkUtilitiesIbcChannelUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities ibc-channel -message JSON

IbcChannel implements ibc_channel.
    -message JSON: 

Example:
    %[1]s sdk-utilities ibc-channel --message '{
      "payload": [
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         }
      ]
   }'
`, os.Args[0])
}

func sdkUtilitiesIbcClientStateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities ibc-client-state -message JSON

IbcClientState implements ibc_client_state.
    -message JSON: 

Example:
    %[1]s sdk-utilities ibc-client-state --message '{
      "payload": [
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         }
      ]
   }'
`, os.Args[0])
}

func sdkUtilitiesIbcConnectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities ibc-connection -message JSON

IbcConnection implements ibc_connection.
    -message JSON: 

Example:
    %[1]s sdk-utilities ibc-connection --message '{
      "payload": [
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         }
      ]
   }'
`, os.Args[0])
}

func sdkUtilitiesIbcDenomTraceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sdk-utilities ibc-denom-trace -message JSON

IbcDenomTrace implements ibc_denom_trace.
    -message JSON: 

Example:
    %[1]s sdk-utilities ibc-denom-trace --message '{
      "payload": [
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         },
         {
            "key": "QXV0IHNpdCBub2JpcyBldCBzaXQu",
            "operationType": "delete",
            "value": "Q3VwaWRpdGF0ZSByZXByZWhlbmRlcml0IHF1aWEgc3VzY2lwaXQgcmVydW0gY29ycnVwdGku"
         }
      ]
   }'
`, os.Args[0])
}

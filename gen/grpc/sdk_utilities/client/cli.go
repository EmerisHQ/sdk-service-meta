// Code generated by goa v3.7.2, DO NOT EDIT.
//
// sdk-utilities gRPC client CLI support package
//
// Command:
// $ goa gen github.com/emerishq/sdk-service-meta

package client

import (
	"encoding/json"
	"fmt"

	sdk_utilitiespb "github.com/emerishq/sdk-service-meta/gen/grpc/sdk_utilities/pb"
	sdkutilities "github.com/emerishq/sdk-service-meta/gen/sdk_utilities"
)

// BuildAccountNumbersPayload builds the payload for the sdk-utilities
// accountNumbers endpoint from CLI flags.
func BuildAccountNumbersPayload(sdkUtilitiesAccountNumbersMessage string) (*sdkutilities.AccountNumbersPayload, error) {
	var err error
	var message sdk_utilitiespb.AccountNumbersRequest
	{
		if sdkUtilitiesAccountNumbersMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesAccountNumbersMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"addresHex\": \"Qui aut id.\",\n      \"bech32Prefix\": \"Dolorem tenetur cum dolores veniam.\",\n      \"chainName\": \"Recusandae facilis temporibus.\",\n      \"port\": 6273086711467444602\n   }'")
			}
		}
	}
	v := &sdkutilities.AccountNumbersPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}
	if message.Bech32Prefix != "" {
		v.Bech32Prefix = &message.Bech32Prefix
	}
	if message.AddresHex != "" {
		v.AddresHex = &message.AddresHex
	}

	return v, nil
}

// BuildSupplyPayload builds the payload for the sdk-utilities supply endpoint
// from CLI flags.
func BuildSupplyPayload(sdkUtilitiesSupplyMessage string) (*sdkutilities.SupplyPayload, error) {
	var err error
	var message sdk_utilitiespb.SupplyRequest
	{
		if sdkUtilitiesSupplyMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesSupplyMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Ea eaque.\",\n      \"paginationKey\": \"Et quo dolorum.\",\n      \"port\": 3852088934630280001\n   }'")
			}
		}
	}
	v := &sdkutilities.SupplyPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}
	if message.PaginationKey != "" {
		v.PaginationKey = &message.PaginationKey
	}

	return v, nil
}

// BuildSupplyDenomPayload builds the payload for the sdk-utilities supplyDenom
// endpoint from CLI flags.
func BuildSupplyDenomPayload(sdkUtilitiesSupplyDenomMessage string) (*sdkutilities.SupplyDenomPayload, error) {
	var err error
	var message sdk_utilitiespb.SupplyDenomRequest
	{
		if sdkUtilitiesSupplyDenomMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesSupplyDenomMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Fugiat optio velit est voluptatibus non aperiam.\",\n      \"denom\": \"Veniam ut sapiente amet nostrum.\",\n      \"port\": 991976292470651970\n   }'")
			}
		}
	}
	v := &sdkutilities.SupplyDenomPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}
	if message.Denom != "" {
		v.Denom = &message.Denom
	}

	return v, nil
}

// BuildQueryTxPayload builds the payload for the sdk-utilities queryTx
// endpoint from CLI flags.
func BuildQueryTxPayload(sdkUtilitiesQueryTxMessage string) (*sdkutilities.QueryTxPayload, error) {
	var err error
	var message sdk_utilitiespb.QueryTxRequest
	{
		if sdkUtilitiesQueryTxMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesQueryTxMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Nihil error odit qui eum.\",\n      \"hash\": \"Esse nulla quis blanditiis aspernatur quis omnis.\",\n      \"port\": 6756764320862431917\n   }'")
			}
		}
	}
	v := &sdkutilities.QueryTxPayload{
		ChainName: message.ChainName,
		Hash:      message.Hash,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildBroadcastTxPayload builds the payload for the sdk-utilities broadcastTx
// endpoint from CLI flags.
func BuildBroadcastTxPayload(sdkUtilitiesBroadcastTxMessage string) (*sdkutilities.BroadcastTxPayload, error) {
	var err error
	var message sdk_utilitiespb.BroadcastTxRequest
	{
		if sdkUtilitiesBroadcastTxMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesBroadcastTxMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Tempore alias quo animi eos.\",\n      \"port\": 4553934225864173458,\n      \"txBytes\": \"VmVsaXQgb2NjYWVjYXRpIHV0Lg==\"\n   }'")
			}
		}
	}
	v := &sdkutilities.BroadcastTxPayload{
		ChainName: message.ChainName,
		TxBytes:   message.TxBytes,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildTxMetadataPayload builds the payload for the sdk-utilities txMetadata
// endpoint from CLI flags.
func BuildTxMetadataPayload(sdkUtilitiesTxMetadataMessage string) (*sdkutilities.TxMetadataPayload, error) {
	var err error
	var message sdk_utilitiespb.TxMetadataRequest
	{
		if sdkUtilitiesTxMetadataMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesTxMetadataMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"txBytes\": \"U2VxdWkgYW5pbWkgdmVyby4=\"\n   }'")
			}
		}
	}
	v := &sdkutilities.TxMetadataPayload{
		TxBytes: message.TxBytes,
	}

	return v, nil
}

// BuildBlockPayload builds the payload for the sdk-utilities block endpoint
// from CLI flags.
func BuildBlockPayload(sdkUtilitiesBlockMessage string) (*sdkutilities.BlockPayload, error) {
	var err error
	var message sdk_utilitiespb.BlockRequest
	{
		if sdkUtilitiesBlockMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesBlockMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Ratione itaque temporibus ut voluptates quia officiis.\",\n      \"height\": 2274637546814150776,\n      \"port\": 2477448663619511809\n   }'")
			}
		}
	}
	v := &sdkutilities.BlockPayload{
		ChainName: message.ChainName,
		Height:    message.Height,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildLiquidityParamsPayload builds the payload for the sdk-utilities
// liquidityParams endpoint from CLI flags.
func BuildLiquidityParamsPayload(sdkUtilitiesLiquidityParamsMessage string) (*sdkutilities.LiquidityParamsPayload, error) {
	var err error
	var message sdk_utilitiespb.LiquidityParamsRequest
	{
		if sdkUtilitiesLiquidityParamsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesLiquidityParamsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Facere fuga.\",\n      \"port\": 8186270742502271766\n   }'")
			}
		}
	}
	v := &sdkutilities.LiquidityParamsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildLiquidityPoolsPayload builds the payload for the sdk-utilities
// liquidityPools endpoint from CLI flags.
func BuildLiquidityPoolsPayload(sdkUtilitiesLiquidityPoolsMessage string) (*sdkutilities.LiquidityPoolsPayload, error) {
	var err error
	var message sdk_utilitiespb.LiquidityPoolsRequest
	{
		if sdkUtilitiesLiquidityPoolsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesLiquidityPoolsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Beatae architecto sint.\",\n      \"port\": 1830542922074293562\n   }'")
			}
		}
	}
	v := &sdkutilities.LiquidityPoolsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildMintInflationPayload builds the payload for the sdk-utilities
// mintInflation endpoint from CLI flags.
func BuildMintInflationPayload(sdkUtilitiesMintInflationMessage string) (*sdkutilities.MintInflationPayload, error) {
	var err error
	var message sdk_utilitiespb.MintInflationRequest
	{
		if sdkUtilitiesMintInflationMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesMintInflationMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Hic non sit sunt.\",\n      \"port\": 4297245491416268488\n   }'")
			}
		}
	}
	v := &sdkutilities.MintInflationPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildMintParamsPayload builds the payload for the sdk-utilities mintParams
// endpoint from CLI flags.
func BuildMintParamsPayload(sdkUtilitiesMintParamsMessage string) (*sdkutilities.MintParamsPayload, error) {
	var err error
	var message sdk_utilitiespb.MintParamsRequest
	{
		if sdkUtilitiesMintParamsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesMintParamsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Eos odio est vero velit quibusdam illum.\",\n      \"port\": 3434698023359210906\n   }'")
			}
		}
	}
	v := &sdkutilities.MintParamsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildMintAnnualProvisionPayload builds the payload for the sdk-utilities
// mintAnnualProvision endpoint from CLI flags.
func BuildMintAnnualProvisionPayload(sdkUtilitiesMintAnnualProvisionMessage string) (*sdkutilities.MintAnnualProvisionPayload, error) {
	var err error
	var message sdk_utilitiespb.MintAnnualProvisionRequest
	{
		if sdkUtilitiesMintAnnualProvisionMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesMintAnnualProvisionMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Nihil unde dolorem voluptatem dignissimos nam.\",\n      \"port\": 4837104213295428999\n   }'")
			}
		}
	}
	v := &sdkutilities.MintAnnualProvisionPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildMintEpochProvisionsPayload builds the payload for the sdk-utilities
// mintEpochProvisions endpoint from CLI flags.
func BuildMintEpochProvisionsPayload(sdkUtilitiesMintEpochProvisionsMessage string) (*sdkutilities.MintEpochProvisionsPayload, error) {
	var err error
	var message sdk_utilitiespb.MintEpochProvisionsRequest
	{
		if sdkUtilitiesMintEpochProvisionsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesMintEpochProvisionsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Laudantium est cumque.\",\n      \"port\": 419520256451477429\n   }'")
			}
		}
	}
	v := &sdkutilities.MintEpochProvisionsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildDelegatorRewardsPayload builds the payload for the sdk-utilities
// delegatorRewards endpoint from CLI flags.
func BuildDelegatorRewardsPayload(sdkUtilitiesDelegatorRewardsMessage string) (*sdkutilities.DelegatorRewardsPayload, error) {
	var err error
	var message sdk_utilitiespb.DelegatorRewardsRequest
	{
		if sdkUtilitiesDelegatorRewardsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesDelegatorRewardsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"addresHex\": \"Similique ex voluptatem dolorum ipsam assumenda perferendis.\",\n      \"bech32Prefix\": \"Rerum nihil voluptatem id dolore iure illum.\",\n      \"chainName\": \"Laborum aperiam et assumenda fugiat.\",\n      \"port\": 3777367582328580731\n   }'")
			}
		}
	}
	v := &sdkutilities.DelegatorRewardsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}
	if message.Bech32Prefix != "" {
		v.Bech32Prefix = &message.Bech32Prefix
	}
	if message.AddresHex != "" {
		v.AddresHex = &message.AddresHex
	}

	return v, nil
}

// BuildEstimateFeesPayload builds the payload for the sdk-utilities
// estimateFees endpoint from CLI flags.
func BuildEstimateFeesPayload(sdkUtilitiesEstimateFeesMessage string) (*sdkutilities.EstimateFeesPayload, error) {
	var err error
	var message sdk_utilitiespb.EstimateFeesRequest
	{
		if sdkUtilitiesEstimateFeesMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesEstimateFeesMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Quam sint nihil iure.\",\n      \"port\": 7375012018611562704,\n      \"txBytes\": \"Q29tbW9kaSB2ZWwu\"\n   }'")
			}
		}
	}
	v := &sdkutilities.EstimateFeesPayload{
		ChainName: message.ChainName,
		TxBytes:   message.TxBytes,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildStakingParamsPayload builds the payload for the sdk-utilities
// stakingParams endpoint from CLI flags.
func BuildStakingParamsPayload(sdkUtilitiesStakingParamsMessage string) (*sdkutilities.StakingParamsPayload, error) {
	var err error
	var message sdk_utilitiespb.StakingParamsRequest
	{
		if sdkUtilitiesStakingParamsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesStakingParamsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Architecto aut asperiores et expedita quibusdam.\",\n      \"port\": 7735830947852742027\n   }'")
			}
		}
	}
	v := &sdkutilities.StakingParamsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildStakingPoolPayload builds the payload for the sdk-utilities stakingPool
// endpoint from CLI flags.
func BuildStakingPoolPayload(sdkUtilitiesStakingPoolMessage string) (*sdkutilities.StakingPoolPayload, error) {
	var err error
	var message sdk_utilitiespb.StakingPoolRequest
	{
		if sdkUtilitiesStakingPoolMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesStakingPoolMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Vero quis.\",\n      \"port\": 4226319990021956930\n   }'")
			}
		}
	}
	v := &sdkutilities.StakingPoolPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildEmoneyInflationPayload builds the payload for the sdk-utilities
// emoneyInflation endpoint from CLI flags.
func BuildEmoneyInflationPayload(sdkUtilitiesEmoneyInflationMessage string) (*sdkutilities.EmoneyInflationPayload, error) {
	var err error
	var message sdk_utilitiespb.EmoneyInflationRequest
	{
		if sdkUtilitiesEmoneyInflationMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesEmoneyInflationMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Sunt veniam non architecto asperiores accusamus.\",\n      \"port\": 6039659910429854130\n   }'")
			}
		}
	}
	v := &sdkutilities.EmoneyInflationPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildBudgetParamsPayload builds the payload for the sdk-utilities
// budgetParams endpoint from CLI flags.
func BuildBudgetParamsPayload(sdkUtilitiesBudgetParamsMessage string) (*sdkutilities.BudgetParamsPayload, error) {
	var err error
	var message sdk_utilitiespb.BudgetParamsRequest
	{
		if sdkUtilitiesBudgetParamsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesBudgetParamsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Consequatur sequi eveniet.\",\n      \"port\": 1909085993711873214\n   }'")
			}
		}
	}
	v := &sdkutilities.BudgetParamsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildDistributionParamsPayload builds the payload for the sdk-utilities
// distributionParams endpoint from CLI flags.
func BuildDistributionParamsPayload(sdkUtilitiesDistributionParamsMessage string) (*sdkutilities.DistributionParamsPayload, error) {
	var err error
	var message sdk_utilitiespb.DistributionParamsRequest
	{
		if sdkUtilitiesDistributionParamsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesDistributionParamsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Qui magnam.\",\n      \"port\": 1604212906980434993\n   }'")
			}
		}
	}
	v := &sdkutilities.DistributionParamsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

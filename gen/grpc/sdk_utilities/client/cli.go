// Code generated by goa v3.5.2, DO NOT EDIT.
//
// sdk-utilities gRPC client CLI support package
//
// Command:
// $ goa gen github.com/allinbits/sdk-service-meta

package client

import (
	"encoding/json"
	"fmt"

	sdk_utilitiespb "github.com/allinbits/sdk-service-meta/gen/grpc/sdk_utilities/pb"
	sdkutilities "github.com/allinbits/sdk-service-meta/gen/sdk_utilities"
)

// BuildAccountNumbersPayload builds the payload for the sdk-utilities
// accountNumbers endpoint from CLI flags.
func BuildAccountNumbersPayload(sdkUtilitiesAccountNumbersMessage string) (*sdkutilities.AccountNumbersPayload, error) {
	var err error
	var message sdk_utilitiespb.AccountNumbersRequest
	{
		if sdkUtilitiesAccountNumbersMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesAccountNumbersMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"addresHex\": \"Ipsam nesciunt voluptate nulla numquam dolorum.\",\n      \"bech32Prefix\": \"Molestias autem perferendis.\",\n      \"chainName\": \"Et aut officia ducimus et laboriosam.\",\n      \"port\": 2233703419273888870\n   }'")
			}
		}
	}
	v := &sdkutilities.AccountNumbersPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}
	if message.Bech32Prefix != "" {
		v.Bech32Prefix = &message.Bech32Prefix
	}
	if message.AddresHex != "" {
		v.AddresHex = &message.AddresHex
	}

	return v, nil
}

// BuildSupplyPayload builds the payload for the sdk-utilities supply endpoint
// from CLI flags.
func BuildSupplyPayload(sdkUtilitiesSupplyMessage string) (*sdkutilities.SupplyPayload, error) {
	var err error
	var message sdk_utilitiespb.SupplyRequest
	{
		if sdkUtilitiesSupplyMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesSupplyMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Ut consequatur aliquid dolorum.\",\n      \"port\": 3655322585803899464\n   }'")
			}
		}
	}
	v := &sdkutilities.SupplyPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildQueryTxPayload builds the payload for the sdk-utilities queryTx
// endpoint from CLI flags.
func BuildQueryTxPayload(sdkUtilitiesQueryTxMessage string) (*sdkutilities.QueryTxPayload, error) {
	var err error
	var message sdk_utilitiespb.QueryTxRequest
	{
		if sdkUtilitiesQueryTxMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesQueryTxMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Earum et eius quia.\",\n      \"hash\": \"Ab repudiandae hic.\",\n      \"port\": 184518986587847461\n   }'")
			}
		}
	}
	v := &sdkutilities.QueryTxPayload{
		ChainName: message.ChainName,
		Hash:      message.Hash,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildBroadcastTxPayload builds the payload for the sdk-utilities broadcastTx
// endpoint from CLI flags.
func BuildBroadcastTxPayload(sdkUtilitiesBroadcastTxMessage string) (*sdkutilities.BroadcastTxPayload, error) {
	var err error
	var message sdk_utilitiespb.BroadcastTxRequest
	{
		if sdkUtilitiesBroadcastTxMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesBroadcastTxMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Quaerat eaque quas ea.\",\n      \"port\": 7031085827166329699,\n      \"txBytes\": \"UXVpc3F1YW0gc2ludCBxdWlhIGV0IG1hZ25hbS4=\"\n   }'")
			}
		}
	}
	v := &sdkutilities.BroadcastTxPayload{
		ChainName: message.ChainName,
		TxBytes:   message.TxBytes,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildTxMetadataPayload builds the payload for the sdk-utilities txMetadata
// endpoint from CLI flags.
func BuildTxMetadataPayload(sdkUtilitiesTxMetadataMessage string) (*sdkutilities.TxMetadataPayload, error) {
	var err error
	var message sdk_utilitiespb.TxMetadataRequest
	{
		if sdkUtilitiesTxMetadataMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesTxMetadataMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"txBytes\": \"UXVpc3F1YW0gcmVydW0gZnVnaWF0Lg==\"\n   }'")
			}
		}
	}
	v := &sdkutilities.TxMetadataPayload{
		TxBytes: message.TxBytes,
	}

	return v, nil
}

// BuildBlockPayload builds the payload for the sdk-utilities block endpoint
// from CLI flags.
func BuildBlockPayload(sdkUtilitiesBlockMessage string) (*sdkutilities.BlockPayload, error) {
	var err error
	var message sdk_utilitiespb.BlockRequest
	{
		if sdkUtilitiesBlockMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesBlockMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Molestias ut non aut temporibus.\",\n      \"height\": 4663228169392717920,\n      \"port\": 5647896078819808780\n   }'")
			}
		}
	}
	v := &sdkutilities.BlockPayload{
		ChainName: message.ChainName,
		Height:    message.Height,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildLiquidityParamsPayload builds the payload for the sdk-utilities
// liquidityParams endpoint from CLI flags.
func BuildLiquidityParamsPayload(sdkUtilitiesLiquidityParamsMessage string) (*sdkutilities.LiquidityParamsPayload, error) {
	var err error
	var message sdk_utilitiespb.LiquidityParamsRequest
	{
		if sdkUtilitiesLiquidityParamsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesLiquidityParamsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Velit dicta.\",\n      \"port\": 8651610214817669303\n   }'")
			}
		}
	}
	v := &sdkutilities.LiquidityParamsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildLiquidityPoolsPayload builds the payload for the sdk-utilities
// liquidityPools endpoint from CLI flags.
func BuildLiquidityPoolsPayload(sdkUtilitiesLiquidityPoolsMessage string) (*sdkutilities.LiquidityPoolsPayload, error) {
	var err error
	var message sdk_utilitiespb.LiquidityPoolsRequest
	{
		if sdkUtilitiesLiquidityPoolsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesLiquidityPoolsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Laborum laborum quam ducimus.\",\n      \"port\": 555297839850191844\n   }'")
			}
		}
	}
	v := &sdkutilities.LiquidityPoolsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildMintInflationPayload builds the payload for the sdk-utilities
// mintInflation endpoint from CLI flags.
func BuildMintInflationPayload(sdkUtilitiesMintInflationMessage string) (*sdkutilities.MintInflationPayload, error) {
	var err error
	var message sdk_utilitiespb.MintInflationRequest
	{
		if sdkUtilitiesMintInflationMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesMintInflationMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Quisquam est et aspernatur sunt omnis et.\",\n      \"port\": 2980623663363787275\n   }'")
			}
		}
	}
	v := &sdkutilities.MintInflationPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildMintParamsPayload builds the payload for the sdk-utilities mintParams
// endpoint from CLI flags.
func BuildMintParamsPayload(sdkUtilitiesMintParamsMessage string) (*sdkutilities.MintParamsPayload, error) {
	var err error
	var message sdk_utilitiespb.MintParamsRequest
	{
		if sdkUtilitiesMintParamsMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesMintParamsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Amet dicta quia velit laudantium.\",\n      \"port\": 2966708842863342049\n   }'")
			}
		}
	}
	v := &sdkutilities.MintParamsPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

// BuildMintAnnualProvisionPayload builds the payload for the sdk-utilities
// mintAnnualProvision endpoint from CLI flags.
func BuildMintAnnualProvisionPayload(sdkUtilitiesMintAnnualProvisionMessage string) (*sdkutilities.MintAnnualProvisionPayload, error) {
	var err error
	var message sdk_utilitiespb.MintAnnualProvisionRequest
	{
		if sdkUtilitiesMintAnnualProvisionMessage != "" {
			err = json.Unmarshal([]byte(sdkUtilitiesMintAnnualProvisionMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"chainName\": \"Itaque tenetur explicabo est neque.\",\n      \"port\": 1748383819728833353\n   }'")
			}
		}
	}
	v := &sdkutilities.MintAnnualProvisionPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}

	return v, nil
}

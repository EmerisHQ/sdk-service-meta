// Code generated by goa v3.6.1, DO NOT EDIT.
//
// sdk-utilities gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/emerishq/sdk-service-meta

package client

import (
	"context"

	sdk_utilitiespb "github.com/emerishq/sdk-service-meta/gen/grpc/sdk_utilities/pb"
	sdkutilities "github.com/emerishq/sdk-service-meta/gen/sdk_utilities"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildAccountNumbersFunc builds the remote method to invoke for
// "sdk-utilities" service "accountNumbers" endpoint.
func BuildAccountNumbersFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.AccountNumbers(ctx, reqpb.(*sdk_utilitiespb.AccountNumbersRequest), opts...)
		}
		return grpccli.AccountNumbers(ctx, &sdk_utilitiespb.AccountNumbersRequest{}, opts...)
	}
}

// EncodeAccountNumbersRequest encodes requests sent to sdk-utilities
// accountNumbers endpoint.
func EncodeAccountNumbersRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.AccountNumbersPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "accountNumbers", "*sdkutilities.AccountNumbersPayload", v)
	}
	return NewAccountNumbersRequest(payload), nil
}

// DecodeAccountNumbersResponse decodes responses from the sdk-utilities
// accountNumbers endpoint.
func DecodeAccountNumbersResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.AccountNumbersResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "accountNumbers", "*sdk_utilitiespb.AccountNumbersResponse", v)
	}
	res := NewAccountNumbersResult(message)
	return res, nil
}

// BuildSupplyFunc builds the remote method to invoke for "sdk-utilities"
// service "supply" endpoint.
func BuildSupplyFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Supply(ctx, reqpb.(*sdk_utilitiespb.SupplyRequest), opts...)
		}
		return grpccli.Supply(ctx, &sdk_utilitiespb.SupplyRequest{}, opts...)
	}
}

// EncodeSupplyRequest encodes requests sent to sdk-utilities supply endpoint.
func EncodeSupplyRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.SupplyPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "supply", "*sdkutilities.SupplyPayload", v)
	}
	return NewSupplyRequest(payload), nil
}

// DecodeSupplyResponse decodes responses from the sdk-utilities supply
// endpoint.
func DecodeSupplyResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.SupplyResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "supply", "*sdk_utilitiespb.SupplyResponse", v)
	}
	if err := ValidateSupplyResponse(message); err != nil {
		return nil, err
	}
	res := NewSupplyResult(message)
	return res, nil
}

// BuildQueryTxFunc builds the remote method to invoke for "sdk-utilities"
// service "queryTx" endpoint.
func BuildQueryTxFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.QueryTx(ctx, reqpb.(*sdk_utilitiespb.QueryTxRequest), opts...)
		}
		return grpccli.QueryTx(ctx, &sdk_utilitiespb.QueryTxRequest{}, opts...)
	}
}

// EncodeQueryTxRequest encodes requests sent to sdk-utilities queryTx endpoint.
func EncodeQueryTxRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.QueryTxPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "queryTx", "*sdkutilities.QueryTxPayload", v)
	}
	return NewQueryTxRequest(payload), nil
}

// DecodeQueryTxResponse decodes responses from the sdk-utilities queryTx
// endpoint.
func DecodeQueryTxResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.QueryTxResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "queryTx", "*sdk_utilitiespb.QueryTxResponse", v)
	}
	res := NewQueryTxResult(message)
	return res, nil
}

// BuildBroadcastTxFunc builds the remote method to invoke for "sdk-utilities"
// service "broadcastTx" endpoint.
func BuildBroadcastTxFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.BroadcastTx(ctx, reqpb.(*sdk_utilitiespb.BroadcastTxRequest), opts...)
		}
		return grpccli.BroadcastTx(ctx, &sdk_utilitiespb.BroadcastTxRequest{}, opts...)
	}
}

// EncodeBroadcastTxRequest encodes requests sent to sdk-utilities broadcastTx
// endpoint.
func EncodeBroadcastTxRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.BroadcastTxPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "broadcastTx", "*sdkutilities.BroadcastTxPayload", v)
	}
	return NewBroadcastTxRequest(payload), nil
}

// DecodeBroadcastTxResponse decodes responses from the sdk-utilities
// broadcastTx endpoint.
func DecodeBroadcastTxResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.BroadcastTxResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "broadcastTx", "*sdk_utilitiespb.BroadcastTxResponse", v)
	}
	res := NewBroadcastTxResult(message)
	return res, nil
}

// BuildTxMetadataFunc builds the remote method to invoke for "sdk-utilities"
// service "txMetadata" endpoint.
func BuildTxMetadataFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.TxMetadata(ctx, reqpb.(*sdk_utilitiespb.TxMetadataRequest), opts...)
		}
		return grpccli.TxMetadata(ctx, &sdk_utilitiespb.TxMetadataRequest{}, opts...)
	}
}

// EncodeTxMetadataRequest encodes requests sent to sdk-utilities txMetadata
// endpoint.
func EncodeTxMetadataRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.TxMetadataPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "txMetadata", "*sdkutilities.TxMetadataPayload", v)
	}
	return NewTxMetadataRequest(payload), nil
}

// DecodeTxMetadataResponse decodes responses from the sdk-utilities txMetadata
// endpoint.
func DecodeTxMetadataResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.TxMetadataResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "txMetadata", "*sdk_utilitiespb.TxMetadataResponse", v)
	}
	if err := ValidateTxMetadataResponse(message); err != nil {
		return nil, err
	}
	res := NewTxMetadataResult(message)
	return res, nil
}

// BuildBlockFunc builds the remote method to invoke for "sdk-utilities"
// service "block" endpoint.
func BuildBlockFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Block(ctx, reqpb.(*sdk_utilitiespb.BlockRequest), opts...)
		}
		return grpccli.Block(ctx, &sdk_utilitiespb.BlockRequest{}, opts...)
	}
}

// EncodeBlockRequest encodes requests sent to sdk-utilities block endpoint.
func EncodeBlockRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.BlockPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "block", "*sdkutilities.BlockPayload", v)
	}
	return NewBlockRequest(payload), nil
}

// DecodeBlockResponse decodes responses from the sdk-utilities block endpoint.
func DecodeBlockResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.BlockResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "block", "*sdk_utilitiespb.BlockResponse", v)
	}
	if err := ValidateBlockResponse(message); err != nil {
		return nil, err
	}
	res := NewBlockResult(message)
	return res, nil
}

// BuildLiquidityParamsFunc builds the remote method to invoke for
// "sdk-utilities" service "liquidityParams" endpoint.
func BuildLiquidityParamsFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.LiquidityParams(ctx, reqpb.(*sdk_utilitiespb.LiquidityParamsRequest), opts...)
		}
		return grpccli.LiquidityParams(ctx, &sdk_utilitiespb.LiquidityParamsRequest{}, opts...)
	}
}

// EncodeLiquidityParamsRequest encodes requests sent to sdk-utilities
// liquidityParams endpoint.
func EncodeLiquidityParamsRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.LiquidityParamsPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "liquidityParams", "*sdkutilities.LiquidityParamsPayload", v)
	}
	return NewLiquidityParamsRequest(payload), nil
}

// DecodeLiquidityParamsResponse decodes responses from the sdk-utilities
// liquidityParams endpoint.
func DecodeLiquidityParamsResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.LiquidityParamsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "liquidityParams", "*sdk_utilitiespb.LiquidityParamsResponse", v)
	}
	if err := ValidateLiquidityParamsResponse(message); err != nil {
		return nil, err
	}
	res := NewLiquidityParamsResult(message)
	return res, nil
}

// BuildLiquidityPoolsFunc builds the remote method to invoke for
// "sdk-utilities" service "liquidityPools" endpoint.
func BuildLiquidityPoolsFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.LiquidityPools(ctx, reqpb.(*sdk_utilitiespb.LiquidityPoolsRequest), opts...)
		}
		return grpccli.LiquidityPools(ctx, &sdk_utilitiespb.LiquidityPoolsRequest{}, opts...)
	}
}

// EncodeLiquidityPoolsRequest encodes requests sent to sdk-utilities
// liquidityPools endpoint.
func EncodeLiquidityPoolsRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.LiquidityPoolsPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "liquidityPools", "*sdkutilities.LiquidityPoolsPayload", v)
	}
	return NewLiquidityPoolsRequest(payload), nil
}

// DecodeLiquidityPoolsResponse decodes responses from the sdk-utilities
// liquidityPools endpoint.
func DecodeLiquidityPoolsResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.LiquidityPoolsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "liquidityPools", "*sdk_utilitiespb.LiquidityPoolsResponse", v)
	}
	if err := ValidateLiquidityPoolsResponse(message); err != nil {
		return nil, err
	}
	res := NewLiquidityPoolsResult(message)
	return res, nil
}

// BuildMintInflationFunc builds the remote method to invoke for
// "sdk-utilities" service "mintInflation" endpoint.
func BuildMintInflationFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.MintInflation(ctx, reqpb.(*sdk_utilitiespb.MintInflationRequest), opts...)
		}
		return grpccli.MintInflation(ctx, &sdk_utilitiespb.MintInflationRequest{}, opts...)
	}
}

// EncodeMintInflationRequest encodes requests sent to sdk-utilities
// mintInflation endpoint.
func EncodeMintInflationRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.MintInflationPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "mintInflation", "*sdkutilities.MintInflationPayload", v)
	}
	return NewMintInflationRequest(payload), nil
}

// DecodeMintInflationResponse decodes responses from the sdk-utilities
// mintInflation endpoint.
func DecodeMintInflationResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.MintInflationResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "mintInflation", "*sdk_utilitiespb.MintInflationResponse", v)
	}
	if err := ValidateMintInflationResponse(message); err != nil {
		return nil, err
	}
	res := NewMintInflationResult(message)
	return res, nil
}

// BuildMintParamsFunc builds the remote method to invoke for "sdk-utilities"
// service "mintParams" endpoint.
func BuildMintParamsFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.MintParams(ctx, reqpb.(*sdk_utilitiespb.MintParamsRequest), opts...)
		}
		return grpccli.MintParams(ctx, &sdk_utilitiespb.MintParamsRequest{}, opts...)
	}
}

// EncodeMintParamsRequest encodes requests sent to sdk-utilities mintParams
// endpoint.
func EncodeMintParamsRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.MintParamsPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "mintParams", "*sdkutilities.MintParamsPayload", v)
	}
	return NewMintParamsRequest(payload), nil
}

// DecodeMintParamsResponse decodes responses from the sdk-utilities mintParams
// endpoint.
func DecodeMintParamsResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.MintParamsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "mintParams", "*sdk_utilitiespb.MintParamsResponse", v)
	}
	if err := ValidateMintParamsResponse(message); err != nil {
		return nil, err
	}
	res := NewMintParamsResult(message)
	return res, nil
}

// BuildMintAnnualProvisionFunc builds the remote method to invoke for
// "sdk-utilities" service "mintAnnualProvision" endpoint.
func BuildMintAnnualProvisionFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.MintAnnualProvision(ctx, reqpb.(*sdk_utilitiespb.MintAnnualProvisionRequest), opts...)
		}
		return grpccli.MintAnnualProvision(ctx, &sdk_utilitiespb.MintAnnualProvisionRequest{}, opts...)
	}
}

// EncodeMintAnnualProvisionRequest encodes requests sent to sdk-utilities
// mintAnnualProvision endpoint.
func EncodeMintAnnualProvisionRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.MintAnnualProvisionPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "mintAnnualProvision", "*sdkutilities.MintAnnualProvisionPayload", v)
	}
	return NewMintAnnualProvisionRequest(payload), nil
}

// DecodeMintAnnualProvisionResponse decodes responses from the sdk-utilities
// mintAnnualProvision endpoint.
func DecodeMintAnnualProvisionResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.MintAnnualProvisionResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "mintAnnualProvision", "*sdk_utilitiespb.MintAnnualProvisionResponse", v)
	}
	if err := ValidateMintAnnualProvisionResponse(message); err != nil {
		return nil, err
	}
	res := NewMintAnnualProvisionResult(message)
	return res, nil
}

// BuildMintEpochProvisionsFunc builds the remote method to invoke for
// "sdk-utilities" service "mintEpochProvisions" endpoint.
func BuildMintEpochProvisionsFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.MintEpochProvisions(ctx, reqpb.(*sdk_utilitiespb.MintEpochProvisionsRequest), opts...)
		}
		return grpccli.MintEpochProvisions(ctx, &sdk_utilitiespb.MintEpochProvisionsRequest{}, opts...)
	}
}

// EncodeMintEpochProvisionsRequest encodes requests sent to sdk-utilities
// mintEpochProvisions endpoint.
func EncodeMintEpochProvisionsRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.MintEpochProvisionsPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "mintEpochProvisions", "*sdkutilities.MintEpochProvisionsPayload", v)
	}
	return NewMintEpochProvisionsRequest(payload), nil
}

// DecodeMintEpochProvisionsResponse decodes responses from the sdk-utilities
// mintEpochProvisions endpoint.
func DecodeMintEpochProvisionsResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.MintEpochProvisionsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "mintEpochProvisions", "*sdk_utilitiespb.MintEpochProvisionsResponse", v)
	}
	if err := ValidateMintEpochProvisionsResponse(message); err != nil {
		return nil, err
	}
	res := NewMintEpochProvisionsResult(message)
	return res, nil
}

// BuildDelegatorRewardsFunc builds the remote method to invoke for
// "sdk-utilities" service "delegatorRewards" endpoint.
func BuildDelegatorRewardsFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.DelegatorRewards(ctx, reqpb.(*sdk_utilitiespb.DelegatorRewardsRequest), opts...)
		}
		return grpccli.DelegatorRewards(ctx, &sdk_utilitiespb.DelegatorRewardsRequest{}, opts...)
	}
}

// EncodeDelegatorRewardsRequest encodes requests sent to sdk-utilities
// delegatorRewards endpoint.
func EncodeDelegatorRewardsRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.DelegatorRewardsPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "delegatorRewards", "*sdkutilities.DelegatorRewardsPayload", v)
	}
	return NewDelegatorRewardsRequest(payload), nil
}

// DecodeDelegatorRewardsResponse decodes responses from the sdk-utilities
// delegatorRewards endpoint.
func DecodeDelegatorRewardsResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.DelegatorRewardsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "delegatorRewards", "*sdk_utilitiespb.DelegatorRewardsResponse", v)
	}
	res := NewDelegatorRewardsResult(message)
	return res, nil
}

// BuildEstimateFeesFunc builds the remote method to invoke for "sdk-utilities"
// service "estimateFees" endpoint.
func BuildEstimateFeesFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.EstimateFees(ctx, reqpb.(*sdk_utilitiespb.EstimateFeesRequest), opts...)
		}
		return grpccli.EstimateFees(ctx, &sdk_utilitiespb.EstimateFeesRequest{}, opts...)
	}
}

// EncodeEstimateFeesRequest encodes requests sent to sdk-utilities
// estimateFees endpoint.
func EncodeEstimateFeesRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.EstimateFeesPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "estimateFees", "*sdkutilities.EstimateFeesPayload", v)
	}
	return NewEstimateFeesRequest(payload), nil
}

// DecodeEstimateFeesResponse decodes responses from the sdk-utilities
// estimateFees endpoint.
func DecodeEstimateFeesResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.EstimateFeesResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "estimateFees", "*sdk_utilitiespb.EstimateFeesResponse", v)
	}
	res := NewEstimateFeesResult(message)
	return res, nil
}

// BuildStakingParamsFunc builds the remote method to invoke for
// "sdk-utilities" service "stakingParams" endpoint.
func BuildStakingParamsFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.StakingParams(ctx, reqpb.(*sdk_utilitiespb.StakingParamsRequest), opts...)
		}
		return grpccli.StakingParams(ctx, &sdk_utilitiespb.StakingParamsRequest{}, opts...)
	}
}

// EncodeStakingParamsRequest encodes requests sent to sdk-utilities
// stakingParams endpoint.
func EncodeStakingParamsRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.StakingParamsPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "stakingParams", "*sdkutilities.StakingParamsPayload", v)
	}
	return NewStakingParamsRequest(payload), nil
}

// DecodeStakingParamsResponse decodes responses from the sdk-utilities
// stakingParams endpoint.
func DecodeStakingParamsResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.StakingParamsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "stakingParams", "*sdk_utilitiespb.StakingParamsResponse", v)
	}
	if err := ValidateStakingParamsResponse(message); err != nil {
		return nil, err
	}
	res := NewStakingParamsResult(message)
	return res, nil
}

// BuildStakingPoolFunc builds the remote method to invoke for "sdk-utilities"
// service "stakingPool" endpoint.
func BuildStakingPoolFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.StakingPool(ctx, reqpb.(*sdk_utilitiespb.StakingPoolRequest), opts...)
		}
		return grpccli.StakingPool(ctx, &sdk_utilitiespb.StakingPoolRequest{}, opts...)
	}
}

// EncodeStakingPoolRequest encodes requests sent to sdk-utilities stakingPool
// endpoint.
func EncodeStakingPoolRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.StakingPoolPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "stakingPool", "*sdkutilities.StakingPoolPayload", v)
	}
	return NewStakingPoolRequest(payload), nil
}

// DecodeStakingPoolResponse decodes responses from the sdk-utilities
// stakingPool endpoint.
func DecodeStakingPoolResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.StakingPoolResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "stakingPool", "*sdk_utilitiespb.StakingPoolResponse", v)
	}
	if err := ValidateStakingPoolResponse(message); err != nil {
		return nil, err
	}
	res := NewStakingPoolResult(message)
	return res, nil
}

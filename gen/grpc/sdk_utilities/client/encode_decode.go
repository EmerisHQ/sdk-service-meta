// Code generated by goa v3.5.2, DO NOT EDIT.
//
// sdk-utilities gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/allinbits/sdk-service-meta

package client

import (
	"context"

	sdk_utilitiespb "github.com/allinbits/sdk-service-meta/gen/grpc/sdk_utilities/pb"
	sdkutilities "github.com/allinbits/sdk-service-meta/gen/sdk_utilities"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildSupplyFunc builds the remote method to invoke for "sdk-utilities"
// service "supply" endpoint.
func BuildSupplyFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Supply(ctx, reqpb.(*sdk_utilitiespb.SupplyRequest), opts...)
		}
		return grpccli.Supply(ctx, &sdk_utilitiespb.SupplyRequest{}, opts...)
	}
}

// EncodeSupplyRequest encodes requests sent to sdk-utilities supply endpoint.
func EncodeSupplyRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.SupplyPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "supply", "*sdkutilities.SupplyPayload", v)
	}
	return NewSupplyRequest(payload), nil
}

// DecodeSupplyResponse decodes responses from the sdk-utilities supply
// endpoint.
func DecodeSupplyResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.SupplyResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "supply", "*sdk_utilitiespb.SupplyResponse", v)
	}
	if err := ValidateSupplyResponse(message); err != nil {
		return nil, err
	}
	res := NewSupplyResult(message)
	return res, nil
}

// BuildQueryTxFunc builds the remote method to invoke for "sdk-utilities"
// service "queryTx" endpoint.
func BuildQueryTxFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.QueryTx(ctx, reqpb.(*sdk_utilitiespb.QueryTxRequest), opts...)
		}
		return grpccli.QueryTx(ctx, &sdk_utilitiespb.QueryTxRequest{}, opts...)
	}
}

// EncodeQueryTxRequest encodes requests sent to sdk-utilities queryTx endpoint.
func EncodeQueryTxRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.QueryTxPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "queryTx", "*sdkutilities.QueryTxPayload", v)
	}
	return NewQueryTxRequest(payload), nil
}

// DecodeQueryTxResponse decodes responses from the sdk-utilities queryTx
// endpoint.
func DecodeQueryTxResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.QueryTxResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "queryTx", "*sdk_utilitiespb.QueryTxResponse", v)
	}
	res := NewQueryTxResult(message)
	return res, nil
}

// BuildBroadcastTxFunc builds the remote method to invoke for "sdk-utilities"
// service "broadcastTx" endpoint.
func BuildBroadcastTxFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.BroadcastTx(ctx, reqpb.(*sdk_utilitiespb.BroadcastTxRequest), opts...)
		}
		return grpccli.BroadcastTx(ctx, &sdk_utilitiespb.BroadcastTxRequest{}, opts...)
	}
}

// EncodeBroadcastTxRequest encodes requests sent to sdk-utilities broadcastTx
// endpoint.
func EncodeBroadcastTxRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.BroadcastTxPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "broadcastTx", "*sdkutilities.BroadcastTxPayload", v)
	}
	return NewBroadcastTxRequest(payload), nil
}

// DecodeBroadcastTxResponse decodes responses from the sdk-utilities
// broadcastTx endpoint.
func DecodeBroadcastTxResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.BroadcastTxResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "broadcastTx", "*sdk_utilitiespb.BroadcastTxResponse", v)
	}
	res := NewBroadcastTxResult(message)
	return res, nil
}

// BuildTxMetadataEndpointFunc builds the remote method to invoke for
// "sdk-utilities" service "txMetadata" endpoint.
func BuildTxMetadataEndpointFunc(grpccli sdk_utilitiespb.SdkUtilitiesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.TxMetadataEndpoint(ctx, reqpb.(*sdk_utilitiespb.TxMetadataRequest), opts...)
		}
		return grpccli.TxMetadataEndpoint(ctx, &sdk_utilitiespb.TxMetadataRequest{}, opts...)
	}
}

// EncodeTxMetadataEndpointRequest encodes requests sent to sdk-utilities
// txMetadata endpoint.
func EncodeTxMetadataEndpointRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*sdkutilities.TxMetadataPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "txMetadata", "*sdkutilities.TxMetadataPayload", v)
	}
	return NewTxMetadataRequest(payload), nil
}

// DecodeTxMetadataEndpointResponse decodes responses from the sdk-utilities
// txMetadata endpoint.
func DecodeTxMetadataEndpointResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*sdk_utilitiespb.TxMetadataResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sdk-utilities", "txMetadata", "*sdk_utilitiespb.TxMetadataResponse", v)
	}
	if err := ValidateTxMetadataResponse(message); err != nil {
		return nil, err
	}
	res := NewTxMetadataResult(message)
	return res, nil
}

// Code generated by goa v3.5.3, DO NOT EDIT.
//
// sdk-utilities gRPC client types
//
// Command:
// $ goa gen github.com/allinbits/sdk-service-meta

package client

import (
	sdk_utilitiespb "github.com/allinbits/sdk-service-meta/gen/grpc/sdk_utilities/pb"
	sdkutilities "github.com/allinbits/sdk-service-meta/gen/sdk_utilities"
	goa "goa.design/goa/v3/pkg"
)

// NewAccountNumbersRequest builds the gRPC request type from the payload of
// the "accountNumbers" endpoint of the "sdk-utilities" service.
func NewAccountNumbersRequest(payload *sdkutilities.AccountNumbersPayload) *sdk_utilitiespb.AccountNumbersRequest {
	message := &sdk_utilitiespb.AccountNumbersRequest{
		ChainName: payload.ChainName,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	if payload.Bech32Prefix != nil {
		message.Bech32Prefix = *payload.Bech32Prefix
	}
	if payload.AddresHex != nil {
		message.AddresHex = *payload.AddresHex
	}
	return message
}

// NewAccountNumbersResult builds the result type of the "accountNumbers"
// endpoint of the "sdk-utilities" service from the gRPC response type.
func NewAccountNumbersResult(message *sdk_utilitiespb.AccountNumbersResponse) *sdkutilities.AccountNumbers2 {
	result := &sdkutilities.AccountNumbers2{
		AccountNumber:  message.AccountNumber,
		SequenceNumber: message.SequenceNumber,
		Bech32Address:  message.Bech32Address,
	}
	return result
}

// NewSupplyRequest builds the gRPC request type from the payload of the
// "supply" endpoint of the "sdk-utilities" service.
func NewSupplyRequest(payload *sdkutilities.SupplyPayload) *sdk_utilitiespb.SupplyRequest {
	message := &sdk_utilitiespb.SupplyRequest{
		ChainName: payload.ChainName,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewSupplyResult builds the result type of the "supply" endpoint of the
// "sdk-utilities" service from the gRPC response type.
func NewSupplyResult(message *sdk_utilitiespb.SupplyResponse) *sdkutilities.Supply2 {
	result := &sdkutilities.Supply2{}
	if message.Coins != nil {
		result.Coins = make([]*sdkutilities.Coin, len(message.Coins))
		for i, val := range message.Coins {
			result.Coins[i] = &sdkutilities.Coin{
				Denom:  val.Denom,
				Amount: val.Amount,
			}
		}
	}
	return result
}

// NewQueryTxRequest builds the gRPC request type from the payload of the
// "queryTx" endpoint of the "sdk-utilities" service.
func NewQueryTxRequest(payload *sdkutilities.QueryTxPayload) *sdk_utilitiespb.QueryTxRequest {
	message := &sdk_utilitiespb.QueryTxRequest{
		ChainName: payload.ChainName,
		Hash:      payload.Hash,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewQueryTxResult builds the result type of the "queryTx" endpoint of the
// "sdk-utilities" service from the gRPC response type.
func NewQueryTxResult(message *sdk_utilitiespb.QueryTxResponse) []byte {
	result := message.Field
	return result
}

// NewBroadcastTxRequest builds the gRPC request type from the payload of the
// "broadcastTx" endpoint of the "sdk-utilities" service.
func NewBroadcastTxRequest(payload *sdkutilities.BroadcastTxPayload) *sdk_utilitiespb.BroadcastTxRequest {
	message := &sdk_utilitiespb.BroadcastTxRequest{
		ChainName: payload.ChainName,
		TxBytes:   payload.TxBytes,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewBroadcastTxResult builds the result type of the "broadcastTx" endpoint of
// the "sdk-utilities" service from the gRPC response type.
func NewBroadcastTxResult(message *sdk_utilitiespb.BroadcastTxResponse) *sdkutilities.TransactionResult {
	result := &sdkutilities.TransactionResult{
		Hash: message.Hash,
	}
	return result
}

// NewTxMetadataRequest builds the gRPC request type from the payload of the
// "txMetadata" endpoint of the "sdk-utilities" service.
func NewTxMetadataRequest(payload *sdkutilities.TxMetadataPayload) *sdk_utilitiespb.TxMetadataRequest {
	message := &sdk_utilitiespb.TxMetadataRequest{
		TxBytes: payload.TxBytes,
	}
	return message
}

// NewTxMetadataResult builds the result type of the "txMetadata" endpoint of
// the "sdk-utilities" service from the gRPC response type.
func NewTxMetadataResult(message *sdk_utilitiespb.TxMetadataResponse) *sdkutilities.TxMessagesMetadata {
	result := &sdkutilities.TxMessagesMetadata{}
	if message.MessagesMetadata != nil {
		result.MessagesMetadata = make([]*sdkutilities.MsgMetadata, len(message.MessagesMetadata))
		for i, val := range message.MessagesMetadata {
			result.MessagesMetadata[i] = &sdkutilities.MsgMetadata{
				MsgType: val.MsgType,
			}
			if val.IbcTransferMetadata != nil {
				result.MessagesMetadata[i].IbcTransferMetadata = protobufSdkUtilitiespbIBCTransferMetadataToSdkutilitiesIBCTransferMetadata(val.IbcTransferMetadata)
			}
		}
	}
	return result
}

// NewBlockRequest builds the gRPC request type from the payload of the "block"
// endpoint of the "sdk-utilities" service.
func NewBlockRequest(payload *sdkutilities.BlockPayload) *sdk_utilitiespb.BlockRequest {
	message := &sdk_utilitiespb.BlockRequest{
		ChainName: payload.ChainName,
		Height:    payload.Height,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewBlockResult builds the result type of the "block" endpoint of the
// "sdk-utilities" service from the gRPC response type.
func NewBlockResult(message *sdk_utilitiespb.BlockResponse) *sdkutilities.BlockData {
	result := &sdkutilities.BlockData{
		Height: message.Height,
		Block:  message.Block,
	}
	return result
}

// NewLiquidityParamsRequest builds the gRPC request type from the payload of
// the "liquidityParams" endpoint of the "sdk-utilities" service.
func NewLiquidityParamsRequest(payload *sdkutilities.LiquidityParamsPayload) *sdk_utilitiespb.LiquidityParamsRequest {
	message := &sdk_utilitiespb.LiquidityParamsRequest{
		ChainName: payload.ChainName,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewLiquidityParamsResult builds the result type of the "liquidityParams"
// endpoint of the "sdk-utilities" service from the gRPC response type.
func NewLiquidityParamsResult(message *sdk_utilitiespb.LiquidityParamsResponse) *sdkutilities.LiquidityParams2 {
	result := &sdkutilities.LiquidityParams2{
		LiquidityParams: message.LiquidityParams,
	}
	return result
}

// NewLiquidityPoolsRequest builds the gRPC request type from the payload of
// the "liquidityPools" endpoint of the "sdk-utilities" service.
func NewLiquidityPoolsRequest(payload *sdkutilities.LiquidityPoolsPayload) *sdk_utilitiespb.LiquidityPoolsRequest {
	message := &sdk_utilitiespb.LiquidityPoolsRequest{
		ChainName: payload.ChainName,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewLiquidityPoolsResult builds the result type of the "liquidityPools"
// endpoint of the "sdk-utilities" service from the gRPC response type.
func NewLiquidityPoolsResult(message *sdk_utilitiespb.LiquidityPoolsResponse) *sdkutilities.LiquidityPools2 {
	result := &sdkutilities.LiquidityPools2{
		LiquidityPools: message.LiquidityPools,
	}
	return result
}

// NewMintInflationRequest builds the gRPC request type from the payload of the
// "mintInflation" endpoint of the "sdk-utilities" service.
func NewMintInflationRequest(payload *sdkutilities.MintInflationPayload) *sdk_utilitiespb.MintInflationRequest {
	message := &sdk_utilitiespb.MintInflationRequest{
		ChainName: payload.ChainName,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewMintInflationResult builds the result type of the "mintInflation"
// endpoint of the "sdk-utilities" service from the gRPC response type.
func NewMintInflationResult(message *sdk_utilitiespb.MintInflationResponse) *sdkutilities.MintInflation2 {
	result := &sdkutilities.MintInflation2{
		MintInflation: message.MintInflation,
	}
	return result
}

// NewMintParamsRequest builds the gRPC request type from the payload of the
// "mintParams" endpoint of the "sdk-utilities" service.
func NewMintParamsRequest(payload *sdkutilities.MintParamsPayload) *sdk_utilitiespb.MintParamsRequest {
	message := &sdk_utilitiespb.MintParamsRequest{
		ChainName: payload.ChainName,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewMintParamsResult builds the result type of the "mintParams" endpoint of
// the "sdk-utilities" service from the gRPC response type.
func NewMintParamsResult(message *sdk_utilitiespb.MintParamsResponse) *sdkutilities.MintParams2 {
	result := &sdkutilities.MintParams2{
		MintParams: message.MintParams,
	}
	return result
}

// NewMintAnnualProvisionRequest builds the gRPC request type from the payload
// of the "mintAnnualProvision" endpoint of the "sdk-utilities" service.
func NewMintAnnualProvisionRequest(payload *sdkutilities.MintAnnualProvisionPayload) *sdk_utilitiespb.MintAnnualProvisionRequest {
	message := &sdk_utilitiespb.MintAnnualProvisionRequest{
		ChainName: payload.ChainName,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewMintAnnualProvisionResult builds the result type of the
// "mintAnnualProvision" endpoint of the "sdk-utilities" service from the gRPC
// response type.
func NewMintAnnualProvisionResult(message *sdk_utilitiespb.MintAnnualProvisionResponse) *sdkutilities.MintAnnualProvision2 {
	result := &sdkutilities.MintAnnualProvision2{
		MintAnnualProvision: message.MintAnnualProvision,
	}
	return result
}

// NewDelegatorRewardsRequest builds the gRPC request type from the payload of
// the "delegatorRewards" endpoint of the "sdk-utilities" service.
func NewDelegatorRewardsRequest(payload *sdkutilities.DelegatorRewardsPayload) *sdk_utilitiespb.DelegatorRewardsRequest {
	message := &sdk_utilitiespb.DelegatorRewardsRequest{
		ChainName: payload.ChainName,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	if payload.Bech32Prefix != nil {
		message.Bech32Prefix = *payload.Bech32Prefix
	}
	if payload.AddresHex != nil {
		message.AddresHex = *payload.AddresHex
	}
	return message
}

// NewDelegatorRewardsResult builds the result type of the "delegatorRewards"
// endpoint of the "sdk-utilities" service from the gRPC response type.
func NewDelegatorRewardsResult(message *sdk_utilitiespb.DelegatorRewardsResponse) *sdkutilities.DelegatorRewards2 {
	result := &sdkutilities.DelegatorRewards2{}
	if message.Rewards != nil {
		result.Rewards = make([]*sdkutilities.DelegationDelegatorReward, len(message.Rewards))
		for i, val := range message.Rewards {
			result.Rewards[i] = &sdkutilities.DelegationDelegatorReward{
				ValidatorAddress: val.ValidatorAddress,
			}
			if val.Rewards != nil {
				result.Rewards[i].Rewards = make([]*sdkutilities.Coin, len(val.Rewards))
				for j, val := range val.Rewards {
					result.Rewards[i].Rewards[j] = &sdkutilities.Coin{
						Denom:  val.Denom,
						Amount: val.Amount,
					}
				}
			}
		}
	}
	if message.Total != nil {
		result.Total = make([]*sdkutilities.Coin, len(message.Total))
		for i, val := range message.Total {
			result.Total[i] = &sdkutilities.Coin{
				Denom:  val.Denom,
				Amount: val.Amount,
			}
		}
	}
	return result
}

// NewEstimateFeesRequest builds the gRPC request type from the payload of the
// "estimateFees" endpoint of the "sdk-utilities" service.
func NewEstimateFeesRequest(payload *sdkutilities.EstimateFeesPayload) *sdk_utilitiespb.EstimateFeesRequest {
	message := &sdk_utilitiespb.EstimateFeesRequest{
		ChainName: payload.ChainName,
		TxBytes:   payload.TxBytes,
	}
	if payload.Port != nil {
		message.Port = int32(*payload.Port)
	}
	return message
}

// NewEstimateFeesResult builds the result type of the "estimateFees" endpoint
// of the "sdk-utilities" service from the gRPC response type.
func NewEstimateFeesResult(message *sdk_utilitiespb.EstimateFeesResponse) *sdkutilities.Simulation {
	result := &sdkutilities.Simulation{
		GasWanted: message.GasWanted,
		GasUsed:   message.GasUsed,
	}
	return result
}

// ValidateSupplyResponse runs the validations defined on SupplyResponse.
func ValidateSupplyResponse(message *sdk_utilitiespb.SupplyResponse) (err error) {
	if message.Coins == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("coins", "message"))
	}
	return
}

// ValidateCoin runs the validations defined on Coin.
func ValidateCoin(message *sdk_utilitiespb.Coin) (err error) {

	return
}

// ValidateTxMetadataResponse runs the validations defined on
// TxMetadataResponse.
func ValidateTxMetadataResponse(message *sdk_utilitiespb.TxMetadataResponse) (err error) {
	if message.MessagesMetadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("messagesMetadata", "message"))
	}
	return
}

// ValidateMsgMetadata runs the validations defined on MsgMetadata.
func ValidateMsgMetadata(message *sdk_utilitiespb.MsgMetadata) (err error) {

	return
}

// ValidateIBCTransferMetadata runs the validations defined on
// IBCTransferMetadata.
func ValidateIBCTransferMetadata(message *sdk_utilitiespb.IBCTransferMetadata) (err error) {

	return
}

// ValidateIBCHeight runs the validations defined on IBCHeight.
func ValidateIBCHeight(message *sdk_utilitiespb.IBCHeight) (err error) {

	return
}

// ValidateBlockResponse runs the validations defined on BlockResponse.
func ValidateBlockResponse(message *sdk_utilitiespb.BlockResponse) (err error) {
	if message.Block == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("block", "message"))
	}
	return
}

// ValidateLiquidityParamsResponse runs the validations defined on
// LiquidityParamsResponse.
func ValidateLiquidityParamsResponse(message *sdk_utilitiespb.LiquidityParamsResponse) (err error) {
	if message.LiquidityParams == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("liquidityParams", "message"))
	}
	return
}

// ValidateLiquidityPoolsResponse runs the validations defined on
// LiquidityPoolsResponse.
func ValidateLiquidityPoolsResponse(message *sdk_utilitiespb.LiquidityPoolsResponse) (err error) {
	if message.LiquidityPools == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("liquidityPools", "message"))
	}
	return
}

// ValidateMintInflationResponse runs the validations defined on
// MintInflationResponse.
func ValidateMintInflationResponse(message *sdk_utilitiespb.MintInflationResponse) (err error) {
	if message.MintInflation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mintInflation", "message"))
	}
	return
}

// ValidateMintParamsResponse runs the validations defined on
// MintParamsResponse.
func ValidateMintParamsResponse(message *sdk_utilitiespb.MintParamsResponse) (err error) {
	if message.MintParams == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mintParams", "message"))
	}
	return
}

// ValidateMintAnnualProvisionResponse runs the validations defined on
// MintAnnualProvisionResponse.
func ValidateMintAnnualProvisionResponse(message *sdk_utilitiespb.MintAnnualProvisionResponse) (err error) {
	if message.MintAnnualProvision == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mintAnnualProvision", "message"))
	}
	return
}

// ValidateDelegatorRewardsResponse runs the validations defined on
// DelegatorRewardsResponse.
func ValidateDelegatorRewardsResponse(message *sdk_utilitiespb.DelegatorRewardsResponse) (err error) {
	if message.Rewards == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rewards", "message"))
	}
	if message.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "message"))
	}
	return
}

// ValidateDelegationDelegatorReward runs the validations defined on
// DelegationDelegatorReward.
func ValidateDelegationDelegatorReward(message *sdk_utilitiespb.DelegationDelegatorReward) (err error) {
	if message.Rewards == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rewards", "message"))
	}
	return
}

// svcSdkutilitiesIBCTransferMetadataToSdkUtilitiespbIBCTransferMetadata builds
// a value of type *sdk_utilitiespb.IBCTransferMetadata from a value of type
// *sdkutilities.IBCTransferMetadata.
func svcSdkutilitiesIBCTransferMetadataToSdkUtilitiespbIBCTransferMetadata(v *sdkutilities.IBCTransferMetadata) *sdk_utilitiespb.IBCTransferMetadata {
	if v == nil {
		return nil
	}
	res := &sdk_utilitiespb.IBCTransferMetadata{}
	if v.SourcePort != nil {
		res.SourcePort = *v.SourcePort
	}
	if v.SourceChannel != nil {
		res.SourceChannel = *v.SourceChannel
	}
	if v.Sender != nil {
		res.Sender = *v.Sender
	}
	if v.Receiver != nil {
		res.Receiver = *v.Receiver
	}
	if v.TiemoutTimestamp != nil {
		res.TiemoutTimestamp = *v.TiemoutTimestamp
	}
	if v.Token != nil {
		res.Token = svcSdkutilitiesCoinToSdkUtilitiespbCoin(v.Token)
	}
	if v.TimeoutHeight != nil {
		res.TimeoutHeight = svcSdkutilitiesIBCHeightToSdkUtilitiespbIBCHeight(v.TimeoutHeight)
	}

	return res
}

// svcSdkutilitiesCoinToSdkUtilitiespbCoin builds a value of type
// *sdk_utilitiespb.Coin from a value of type *sdkutilities.Coin.
func svcSdkutilitiesCoinToSdkUtilitiespbCoin(v *sdkutilities.Coin) *sdk_utilitiespb.Coin {
	if v == nil {
		return nil
	}
	res := &sdk_utilitiespb.Coin{
		Denom:  v.Denom,
		Amount: v.Amount,
	}

	return res
}

// svcSdkutilitiesIBCHeightToSdkUtilitiespbIBCHeight builds a value of type
// *sdk_utilitiespb.IBCHeight from a value of type *sdkutilities.IBCHeight.
func svcSdkutilitiesIBCHeightToSdkUtilitiespbIBCHeight(v *sdkutilities.IBCHeight) *sdk_utilitiespb.IBCHeight {
	if v == nil {
		return nil
	}
	res := &sdk_utilitiespb.IBCHeight{}
	if v.RevisionNumber != nil {
		res.RevisionNumber = *v.RevisionNumber
	}
	if v.RevisionHeight != nil {
		res.RevisionHeight = *v.RevisionHeight
	}

	return res
}

// protobufSdkUtilitiespbIBCTransferMetadataToSdkutilitiesIBCTransferMetadata
// builds a value of type *sdkutilities.IBCTransferMetadata from a value of
// type *sdk_utilitiespb.IBCTransferMetadata.
func protobufSdkUtilitiespbIBCTransferMetadataToSdkutilitiesIBCTransferMetadata(v *sdk_utilitiespb.IBCTransferMetadata) *sdkutilities.IBCTransferMetadata {
	if v == nil {
		return nil
	}
	res := &sdkutilities.IBCTransferMetadata{}
	if v.SourcePort != "" {
		res.SourcePort = &v.SourcePort
	}
	if v.SourceChannel != "" {
		res.SourceChannel = &v.SourceChannel
	}
	if v.Sender != "" {
		res.Sender = &v.Sender
	}
	if v.Receiver != "" {
		res.Receiver = &v.Receiver
	}
	if v.TiemoutTimestamp != 0 {
		res.TiemoutTimestamp = &v.TiemoutTimestamp
	}
	if v.Token != nil {
		res.Token = protobufSdkUtilitiespbCoinToSdkutilitiesCoin(v.Token)
	}
	if v.TimeoutHeight != nil {
		res.TimeoutHeight = protobufSdkUtilitiespbIBCHeightToSdkutilitiesIBCHeight(v.TimeoutHeight)
	}

	return res
}

// protobufSdkUtilitiespbCoinToSdkutilitiesCoin builds a value of type
// *sdkutilities.Coin from a value of type *sdk_utilitiespb.Coin.
func protobufSdkUtilitiespbCoinToSdkutilitiesCoin(v *sdk_utilitiespb.Coin) *sdkutilities.Coin {
	if v == nil {
		return nil
	}
	res := &sdkutilities.Coin{
		Denom:  v.Denom,
		Amount: v.Amount,
	}

	return res
}

// protobufSdkUtilitiespbIBCHeightToSdkutilitiesIBCHeight builds a value of
// type *sdkutilities.IBCHeight from a value of type *sdk_utilitiespb.IBCHeight.
func protobufSdkUtilitiespbIBCHeightToSdkutilitiesIBCHeight(v *sdk_utilitiespb.IBCHeight) *sdkutilities.IBCHeight {
	if v == nil {
		return nil
	}
	res := &sdkutilities.IBCHeight{}
	if v.RevisionNumber != 0 {
		res.RevisionNumber = &v.RevisionNumber
	}
	if v.RevisionHeight != 0 {
		res.RevisionHeight = &v.RevisionHeight
	}

	return res
}

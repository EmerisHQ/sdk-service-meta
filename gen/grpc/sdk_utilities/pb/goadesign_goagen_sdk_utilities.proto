// Code generated with goa v3.7.2, DO NOT EDIT.
//
// sdk-utilities protocol buffer definition
//
// Command:
// $ goa gen github.com/emerishq/sdk-service-meta

syntax = "proto3";

package sdk_utilities;

option go_package = "/sdk_utilitiespb";

// sdk-utilities performs Cosmos SDK-related operations
service SdkUtilities {
	// AccountNumbers implements accountNumbers.
	rpc AccountNumbers (AccountNumbersRequest) returns (AccountNumbersResponse);
	// Supply implements supply.
	rpc Supply (SupplyRequest) returns (SupplyResponse);
	// SupplyDenom implements supplyDenom.
	rpc SupplyDenom (SupplyDenomRequest) returns (SupplyDenomResponse);
	// QueryTx implements queryTx.
	rpc QueryTx (QueryTxRequest) returns (QueryTxResponse);
	// BroadcastTx implements broadcastTx.
	rpc BroadcastTx (BroadcastTxRequest) returns (BroadcastTxResponse);
	// TxMetadata implements txMetadata.
	rpc TxMetadata (TxMetadataRequest) returns (TxMetadataResponse);
	// Block implements block.
	rpc Block (BlockRequest) returns (BlockResponse);
	// LiquidityParams implements liquidityParams.
	rpc LiquidityParams (LiquidityParamsRequest) returns (LiquidityParamsResponse);
	// LiquidityPools implements liquidityPools.
	rpc LiquidityPools (LiquidityPoolsRequest) returns (LiquidityPoolsResponse);
	// MintInflation implements mintInflation.
	rpc MintInflation (MintInflationRequest) returns (MintInflationResponse);
	// MintParams implements mintParams.
	rpc MintParams (MintParamsRequest) returns (MintParamsResponse);
	// MintAnnualProvision implements mintAnnualProvision.
	rpc MintAnnualProvision (MintAnnualProvisionRequest) returns (MintAnnualProvisionResponse);
	// MintEpochProvisions implements mintEpochProvisions.
	rpc MintEpochProvisions (MintEpochProvisionsRequest) returns (MintEpochProvisionsResponse);
	// DelegatorRewards implements delegatorRewards.
	rpc DelegatorRewards (DelegatorRewardsRequest) returns (DelegatorRewardsResponse);
	// EstimateFees implements estimateFees.
	rpc EstimateFees (EstimateFeesRequest) returns (EstimateFeesResponse);
	// StakingParams implements stakingParams.
	rpc StakingParams (StakingParamsRequest) returns (StakingParamsResponse);
	// StakingPool implements stakingPool.
	rpc StakingPool (StakingPoolRequest) returns (StakingPoolResponse);
	// EmoneyInflation implements emoneyInflation.
	rpc EmoneyInflation (EmoneyInflationRequest) returns (EmoneyInflationResponse);
	// IbcChannelClientState implements ibcChannelClientState.
	rpc IbcChannelClientState (IbcChannelClientStateRequest) returns (IbcChannelClientStateResponse);
}

message AccountNumbersRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// bech32-encoded prefix of the account
	string bech32_prefix = 3;
	// Hex-encoded address, without bech32 hrp
	string addres_hex = 4;
}

message AccountNumbersResponse {
	sint64 account_number = 1;
	sint64 sequence_number = 2;
	string bech32_address = 3;
}

message SupplyRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// pagination key
	string pagination_key = 3;
}

message SupplyResponse {
	repeated Coin coins = 1;
	Pagination pagination = 2;
}
// SDK service representation of a Cosmos SDK types.Coin
message Coin {
	string denom = 1;
	string amount = 2;
}
// Pagination used in the Cosmos SDK
message Pagination {
	string next_key = 1;
	string total = 2;
}

message SupplyDenomRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// Denom name
	string denom = 3;
}

message SupplyDenomResponse {
	repeated Coin coins = 1;
	Pagination pagination = 2;
}

message QueryTxRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// Transaction hash to query
	string hash = 3;
}

message QueryTxResponse {
	bytes field = 1;
}

message BroadcastTxRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// Transaction bytes
	bytes tx_bytes = 3;
}

message BroadcastTxResponse {
	string hash = 1;
}

message TxMetadataRequest {
	// Transaction bytes
	bytes tx_bytes = 1;
}

message TxMetadataResponse {
	repeated MsgMetadata messages_metadata = 1;
}
// Metadata related to some message contained in a transaction
message MsgMetadata {
	string msg_type = 1;
	IBCTransferMetadata ibc_transfer_metadata = 2;
}
// Metadata related to an IBC Transfer
message IBCTransferMetadata {
	string source_port = 1;
	string source_channel = 2;
	Coin token = 3;
	string sender = 4;
	string receiver = 5;
	IBCHeight timeout_height = 6;
	uint64 tiemout_timestamp = 7;
}
// The plain type associated with ibc-go types.Height struct
message IBCHeight {
	uint64 revision_number = 1;
	uint64 revision_height = 2;
}

message BlockRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// Height of the block to query
	sint64 height = 3;
}

message BlockResponse {
	sint64 height = 1;
	bytes block = 2;
}

message LiquidityParamsRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message LiquidityParamsResponse {
	bytes liquidity_params = 1;
}

message LiquidityPoolsRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message LiquidityPoolsResponse {
	bytes liquidity_pools = 1;
}

message MintInflationRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message MintInflationResponse {
	bytes mint_inflation = 1;
}

message MintParamsRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message MintParamsResponse {
	bytes mint_params = 1;
}

message MintAnnualProvisionRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message MintAnnualProvisionResponse {
	bytes mint_annual_provision = 1;
}

message MintEpochProvisionsRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message MintEpochProvisionsResponse {
	bytes mint_epoch_provisions = 1;
}

message DelegatorRewardsRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// bech32-encoded prefix of the account
	string bech32_prefix = 3;
	// Hex-encoded address, without bech32 hrp
	string addres_hex = 4;
}

message DelegatorRewardsResponse {
	repeated DelegationDelegatorReward rewards = 1;
	repeated Coin total = 2;
}
// Delegation reward as defined in the Cosmos SDK
message DelegationDelegatorReward {
	string validator_address = 1;
	repeated Coin rewards = 2;
}

message EstimateFeesRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// Transaction bytes
	bytes tx_bytes = 3;
}

message EstimateFeesResponse {
	uint64 gas_wanted = 1;
	uint64 gas_used = 2;
	repeated Coin fees = 3;
}

message StakingParamsRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message StakingParamsResponse {
	bytes staking_params = 1;
}

message StakingPoolRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message StakingPoolResponse {
	bytes staking_pool = 1;
}

message EmoneyInflationRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message EmoneyInflationResponse {
	EmoneyState state = 1;
}
// e-money specific inflation parameters (state)
message EmoneyState {
	string last_applied = 1;
	string last_applied_height = 2;
	repeated EmoneyAsset assets = 3;
}
// e-money specific inflation parameters (asset)
message EmoneyAsset {
	string denom = 1;
	string inflation = 2;
	string accum = 3;
}

message IbcChannelClientStateRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message IbcChannelClientStateResponse {
	bytes identified_client_state = 1;
}

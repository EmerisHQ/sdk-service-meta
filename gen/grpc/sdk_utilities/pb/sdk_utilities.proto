// Code generated with goa v3.5.2, DO NOT EDIT.
//
// sdk-utilities protocol buffer definition
//
// Command:
// $ goa gen github.com/allinbits/sdk-service-meta

syntax = "proto3";

package sdk_utilities;

option go_package = "/sdk_utilitiespb";

// sdk-utilities performs Cosmos SDK-related operations
service SdkUtilities {
	// Supply implements supply.
	rpc Supply (SupplyRequest) returns (SupplyResponse);
	// QueryTx implements queryTx.
	rpc QueryTx (QueryTxRequest) returns (QueryTxResponse);
	// BroadcastTx implements broadcastTx.
	rpc BroadcastTx (BroadcastTxRequest) returns (BroadcastTxResponse);
	// TxMetadata implements txMetadata.
	rpc TxMetadata (TxMetadataRequest) returns (TxMetadataResponse);
	// Auth implements auth.
	rpc AuthEndpoint (AuthRequest) returns (AuthResponse);
	// Bank implements bank.
	rpc Bank (BankRequest) returns (BankResponse);
	// Delegation implements delegation.
	rpc DelegationEndpoint (DelegationRequest) returns (DelegationResponse);
	// IbcChannel implements ibc_channel.
	rpc IbcChannel (IbcChannelRequest) returns (IbcChannelResponse);
	// IbcClientState implements ibc_client_state.
	rpc IbcClientState (IbcClientStateRequest) returns (IbcClientStateResponse);
	// IbcConnection implements ibc_connection.
	rpc IbcConnection (IbcConnectionRequest) returns (IbcConnectionResponse);
	// IbcDenomTrace implements ibc_denom_trace.
	rpc IbcDenomTrace (IbcDenomTraceRequest) returns (IbcDenomTraceResponse);
	// UnbondingDelegation implements unbondingDelegation.
	rpc UnbondingDelegationEndpoint (UnbondingDelegationRequest) returns (UnbondingDelegationResponse);
}

message SupplyRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
}

message SupplyResponse {
	repeated Coin coins = 1;
}
// SDK service representation of a Cosmos SDK types.Coin
message Coin {
	string denom = 1;
	string amount = 2;
}

message QueryTxRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// Transaction hash to query
	string hash = 3;
}

message QueryTxResponse {
	bytes field = 1;
}

message BroadcastTxRequest {
	// Chain to get data from
	string chain_name = 1;
	// gRPC port for selected chain, defaults to 9090
	sint32 port = 2;
	// Transaction bytes
	bytes tx_bytes = 3;
}

message BroadcastTxResponse {
	string hash = 1;
}

message TxMetadataRequest {
	// Transaction bytes
	bytes tx_bytes = 1;
}

message TxMetadataResponse {
	repeated MsgMetadata messages_metadata = 1;
}
// Metadata related to some message contained in a transaction
message MsgMetadata {
	string msg_type = 1;
	IBCTransferMetadata ibc_transfer_metadata = 2;
}
// Metadata related to an IBC Transfer
message IBCTransferMetadata {
	string source_port = 1;
	string source_channel = 2;
	Coin token = 3;
	string sender = 4;
	string receiver = 5;
	IBCHeight timeout_height = 6;
	uint64 tiemout_timestamp = 7;
}
// The plain type associated with ibc-go types.Height struct
message IBCHeight {
	uint64 revision_number = 1;
	uint64 revision_height = 2;
}

message AuthProcessingErrorError {
	// Name of error
	string name = 1;
	// Code of error
	sint32 code = 2;
	repeated ErrorObject errors = 3;
}

message ErrorObject {
	string value = 1;
	sint32 payload_index = 2;
}

message AuthRequest {
	repeated TracePayload payload = 1;
}
// Data read off Cosmos SDK tracing facility
message TracePayload {
	bytes key = 1;
	bytes value = 2;
	string operation_type = 3;
}

message AuthResponse {
	repeated Auth field = 1;
}
// Account as unmarshaled from trace bytes
message Auth {
	string address = 1;
	uint64 sequence_number = 2;
	uint64 account_number = 3;
}

message BankProcessingErrorError {
	// Name of error
	string name = 1;
	// Code of error
	sint32 code = 2;
	repeated ErrorObject errors = 3;
}

message BankRequest {
	repeated TracePayload payload = 1;
}

message BankResponse {
	repeated Balance field = 1;
}
// Balance of a given address as unmarshaled from trace bytes
message Balance {
	string address = 1;
	string amount = 2;
	string denom = 3;
}

message DelegationProcessingErrorError {
	// Name of error
	string name = 1;
	// Code of error
	sint32 code = 2;
	repeated ErrorObject errors = 3;
}

message DelegationRequest {
	repeated TracePayload payload = 1;
}

message DelegationResponse {
	repeated Delegation field = 1;
}
// Staking delegation as unmarshaled from trace bytes
message Delegation {
	string delegator = 1;
	string validator = 2;
	string amount = 3;
	string type = 4;
}

message IbcChannelProcessingErrorError {
	// Name of error
	string name = 1;
	// Code of error
	sint32 code = 2;
	repeated ErrorObject errors = 3;
}

message IbcChannelRequest {
	repeated TracePayload payload = 1;
}

message IbcChannelResponse {
	repeated IBCChannel field = 1;
}
// IBC channel as unmarshaled from trace bytes
message IBCChannel {
	string channel_id = 1;
	string counter_channel_id = 2;
	repeated string hops = 3;
	string port = 4;
	sint32 state = 5;
}

message IbcClientStateProcessingErrorError {
	// Name of error
	string name = 1;
	// Code of error
	sint32 code = 2;
	repeated ErrorObject errors = 3;
}

message IbcClientStateRequest {
	repeated TracePayload payload = 1;
}

message IbcClientStateResponse {
	repeated IBCClientState field = 1;
}
// IBC client state as unmarshaled from trace bytes
message IBCClientState {
	string chain_id = 1;
	string client_id = 2;
	uint64 latest_height = 3;
	sint64 trusting_period = 4;
}

message IbcConnectionProcessingErrorError {
	// Name of error
	string name = 1;
	// Code of error
	sint32 code = 2;
	repeated ErrorObject errors = 3;
}

message IbcConnectionRequest {
	repeated TracePayload payload = 1;
}

message IbcConnectionResponse {
	repeated IBCConnection field = 1;
}
// IBC connection as unmarshaled from trace bytes
message IBCConnection {
	string connection_id = 1;
	string client_id = 2;
	string state = 3;
	string counter_connection_id = 4;
	string counter_client_id = 5;
}

message IbcDenomTraceProcessingErrorError {
	// Name of error
	string name = 1;
	// Code of error
	sint32 code = 2;
	repeated ErrorObject errors = 3;
}

message IbcDenomTraceRequest {
	repeated TracePayload payload = 1;
}

message IbcDenomTraceResponse {
	repeated IBCDenomTrace field = 1;
}
// IBC denomination trace as unmarshaled from trace bytes
message IBCDenomTrace {
	string path = 1;
	string base_denom = 2;
	string hash = 3;
}

message UnbondingDelegationProcessingErrorError {
	// Name of error
	string name = 1;
	// Code of error
	sint32 code = 2;
	repeated ErrorObject errors = 3;
}

message UnbondingDelegationRequest {
	repeated TracePayload payload = 1;
}

message UnbondingDelegationResponse {
	repeated UnbondingDelegation field = 1;
}
// Staking unbondingDelegation as unmarshaled from trace bytes
message UnbondingDelegation {
	string delegator = 1;
	string validator = 2;
	string type = 3;
	repeated UnbondingDelegationEntry entries = 4;
}
// A bonded user unbonding delegation entry
message UnbondingDelegationEntry {
	string balance = 1;
	string initial_balance = 2;
	sint64 creation_height = 3;
	sint64 completion_time = 4;
}

// Code generated by goa v3.5.2, DO NOT EDIT.
//
// sdk-utilities gRPC server
//
// Command:
// $ goa gen github.com/allinbits/sdk-service-meta

package server

import (
	"context"

	sdk_utilitiespb "github.com/allinbits/sdk-service-meta/gen/grpc/sdk_utilities/pb"
	sdkutilities "github.com/allinbits/sdk-service-meta/gen/sdk_utilities"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the sdk_utilitiespb.SdkUtilitiesServer interface.
type Server struct {
	SupplyH                      goagrpc.UnaryHandler
	QueryTxH                     goagrpc.UnaryHandler
	BroadcastTxH                 goagrpc.UnaryHandler
	TxMetadataH                  goagrpc.UnaryHandler
	BlockH                       goagrpc.UnaryHandler
	LiquidityParamsH             goagrpc.UnaryHandler
	LiquidityPoolsH              goagrpc.UnaryHandler
	MintInflationH               goagrpc.UnaryHandler
	MintParamsH                  goagrpc.UnaryHandler
	MintAnnualProvisionH         goagrpc.UnaryHandler
	AuthEndpointH                goagrpc.UnaryHandler
	BankH                        goagrpc.UnaryHandler
	DelegationEndpointH          goagrpc.UnaryHandler
	IbcChannelH                  goagrpc.UnaryHandler
	IbcClientStateH              goagrpc.UnaryHandler
	IbcConnectionH               goagrpc.UnaryHandler
	IbcDenomTraceH               goagrpc.UnaryHandler
	UnbondingDelegationEndpointH goagrpc.UnaryHandler
	ValidatorEndpointH           goagrpc.UnaryHandler
	sdk_utilitiespb.UnimplementedSdkUtilitiesServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the sdk-utilities service endpoints.
func New(e *sdkutilities.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		SupplyH:                      NewSupplyHandler(e.Supply, uh),
		QueryTxH:                     NewQueryTxHandler(e.QueryTx, uh),
		BroadcastTxH:                 NewBroadcastTxHandler(e.BroadcastTx, uh),
		TxMetadataH:                  NewTxMetadataHandler(e.TxMetadata, uh),
		BlockH:                       NewBlockHandler(e.Block, uh),
		LiquidityParamsH:             NewLiquidityParamsHandler(e.LiquidityParams, uh),
		LiquidityPoolsH:              NewLiquidityPoolsHandler(e.LiquidityPools, uh),
		MintInflationH:               NewMintInflationHandler(e.MintInflation, uh),
		MintParamsH:                  NewMintParamsHandler(e.MintParams, uh),
		MintAnnualProvisionH:         NewMintAnnualProvisionHandler(e.MintAnnualProvision, uh),
		AuthEndpointH:                NewAuthEndpointHandler(e.AuthEndpoint, uh),
		BankH:                        NewBankHandler(e.Bank, uh),
		DelegationEndpointH:          NewDelegationEndpointHandler(e.DelegationEndpoint, uh),
		IbcChannelH:                  NewIbcChannelHandler(e.IbcChannel, uh),
		IbcClientStateH:              NewIbcClientStateHandler(e.IbcClientState, uh),
		IbcConnectionH:               NewIbcConnectionHandler(e.IbcConnection, uh),
		IbcDenomTraceH:               NewIbcDenomTraceHandler(e.IbcDenomTrace, uh),
		UnbondingDelegationEndpointH: NewUnbondingDelegationEndpointHandler(e.UnbondingDelegationEndpoint, uh),
		ValidatorEndpointH:           NewValidatorEndpointHandler(e.ValidatorEndpoint, uh),
	}
}

// NewSupplyHandler creates a gRPC handler which serves the "sdk-utilities"
// service "supply" endpoint.
func NewSupplyHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSupplyRequest, EncodeSupplyResponse)
	}
	return h
}

// Supply implements the "Supply" method in sdk_utilitiespb.SdkUtilitiesServer
// interface.
func (s *Server) Supply(ctx context.Context, message *sdk_utilitiespb.SupplyRequest) (*sdk_utilitiespb.SupplyResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "supply")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.SupplyH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.SupplyResponse), nil
}

// NewQueryTxHandler creates a gRPC handler which serves the "sdk-utilities"
// service "queryTx" endpoint.
func NewQueryTxHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeQueryTxRequest, EncodeQueryTxResponse)
	}
	return h
}

// QueryTx implements the "QueryTx" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) QueryTx(ctx context.Context, message *sdk_utilitiespb.QueryTxRequest) (*sdk_utilitiespb.QueryTxResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "queryTx")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.QueryTxH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.QueryTxResponse), nil
}

// NewBroadcastTxHandler creates a gRPC handler which serves the
// "sdk-utilities" service "broadcastTx" endpoint.
func NewBroadcastTxHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeBroadcastTxRequest, EncodeBroadcastTxResponse)
	}
	return h
}

// BroadcastTx implements the "BroadcastTx" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) BroadcastTx(ctx context.Context, message *sdk_utilitiespb.BroadcastTxRequest) (*sdk_utilitiespb.BroadcastTxResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "broadcastTx")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.BroadcastTxH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.BroadcastTxResponse), nil
}

// NewTxMetadataHandler creates a gRPC handler which serves the "sdk-utilities"
// service "txMetadata" endpoint.
func NewTxMetadataHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeTxMetadataRequest, EncodeTxMetadataResponse)
	}
	return h
}

// TxMetadata implements the "TxMetadata" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) TxMetadata(ctx context.Context, message *sdk_utilitiespb.TxMetadataRequest) (*sdk_utilitiespb.TxMetadataResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "txMetadata")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.TxMetadataH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.TxMetadataResponse), nil
}

// NewBlockHandler creates a gRPC handler which serves the "sdk-utilities"
// service "block" endpoint.
func NewBlockHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeBlockRequest, EncodeBlockResponse)
	}
	return h
}

// Block implements the "Block" method in sdk_utilitiespb.SdkUtilitiesServer
// interface.
func (s *Server) Block(ctx context.Context, message *sdk_utilitiespb.BlockRequest) (*sdk_utilitiespb.BlockResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "block")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.BlockH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.BlockResponse), nil
}

// NewLiquidityParamsHandler creates a gRPC handler which serves the
// "sdk-utilities" service "liquidityParams" endpoint.
func NewLiquidityParamsHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeLiquidityParamsRequest, EncodeLiquidityParamsResponse)
	}
	return h
}

// LiquidityParams implements the "LiquidityParams" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) LiquidityParams(ctx context.Context, message *sdk_utilitiespb.LiquidityParamsRequest) (*sdk_utilitiespb.LiquidityParamsResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "liquidityParams")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.LiquidityParamsH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.LiquidityParamsResponse), nil
}

// NewLiquidityPoolsHandler creates a gRPC handler which serves the
// "sdk-utilities" service "liquidityPools" endpoint.
func NewLiquidityPoolsHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeLiquidityPoolsRequest, EncodeLiquidityPoolsResponse)
	}
	return h
}

// LiquidityPools implements the "LiquidityPools" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) LiquidityPools(ctx context.Context, message *sdk_utilitiespb.LiquidityPoolsRequest) (*sdk_utilitiespb.LiquidityPoolsResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "liquidityPools")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.LiquidityPoolsH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.LiquidityPoolsResponse), nil
}

// NewMintInflationHandler creates a gRPC handler which serves the
// "sdk-utilities" service "mintInflation" endpoint.
func NewMintInflationHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeMintInflationRequest, EncodeMintInflationResponse)
	}
	return h
}

// MintInflation implements the "MintInflation" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) MintInflation(ctx context.Context, message *sdk_utilitiespb.MintInflationRequest) (*sdk_utilitiespb.MintInflationResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "mintInflation")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.MintInflationH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.MintInflationResponse), nil
}

// NewMintParamsHandler creates a gRPC handler which serves the "sdk-utilities"
// service "mintParams" endpoint.
func NewMintParamsHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeMintParamsRequest, EncodeMintParamsResponse)
	}
	return h
}

// MintParams implements the "MintParams" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) MintParams(ctx context.Context, message *sdk_utilitiespb.MintParamsRequest) (*sdk_utilitiespb.MintParamsResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "mintParams")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.MintParamsH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.MintParamsResponse), nil
}

// NewMintAnnualProvisionHandler creates a gRPC handler which serves the
// "sdk-utilities" service "mintAnnualProvision" endpoint.
func NewMintAnnualProvisionHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeMintAnnualProvisionRequest, EncodeMintAnnualProvisionResponse)
	}
	return h
}

// MintAnnualProvision implements the "MintAnnualProvision" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) MintAnnualProvision(ctx context.Context, message *sdk_utilitiespb.MintAnnualProvisionRequest) (*sdk_utilitiespb.MintAnnualProvisionResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "mintAnnualProvision")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.MintAnnualProvisionH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.MintAnnualProvisionResponse), nil
}

// NewAuthEndpointHandler creates a gRPC handler which serves the
// "sdk-utilities" service "auth" endpoint.
func NewAuthEndpointHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAuthEndpointRequest, EncodeAuthEndpointResponse)
	}
	return h
}

// AuthEndpoint implements the "AuthEndpoint" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) AuthEndpoint(ctx context.Context, message *sdk_utilitiespb.AuthRequest) (*sdk_utilitiespb.AuthResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "auth")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.AuthEndpointH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "ProcessingError":
				er := err.(*sdkutilities.ProcessingError)
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, NewAuthProcessingErrorError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.AuthResponse), nil
}

// NewBankHandler creates a gRPC handler which serves the "sdk-utilities"
// service "bank" endpoint.
func NewBankHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeBankRequest, EncodeBankResponse)
	}
	return h
}

// Bank implements the "Bank" method in sdk_utilitiespb.SdkUtilitiesServer
// interface.
func (s *Server) Bank(ctx context.Context, message *sdk_utilitiespb.BankRequest) (*sdk_utilitiespb.BankResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "bank")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.BankH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "ProcessingError":
				er := err.(*sdkutilities.ProcessingError)
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, NewBankProcessingErrorError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.BankResponse), nil
}

// NewDelegationEndpointHandler creates a gRPC handler which serves the
// "sdk-utilities" service "delegation" endpoint.
func NewDelegationEndpointHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDelegationEndpointRequest, EncodeDelegationEndpointResponse)
	}
	return h
}

// DelegationEndpoint implements the "DelegationEndpoint" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) DelegationEndpoint(ctx context.Context, message *sdk_utilitiespb.DelegationRequest) (*sdk_utilitiespb.DelegationResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "delegation")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.DelegationEndpointH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "ProcessingError":
				er := err.(*sdkutilities.ProcessingError)
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, NewDelegationProcessingErrorError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.DelegationResponse), nil
}

// NewIbcChannelHandler creates a gRPC handler which serves the "sdk-utilities"
// service "ibc_channel" endpoint.
func NewIbcChannelHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeIbcChannelRequest, EncodeIbcChannelResponse)
	}
	return h
}

// IbcChannel implements the "IbcChannel" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) IbcChannel(ctx context.Context, message *sdk_utilitiespb.IbcChannelRequest) (*sdk_utilitiespb.IbcChannelResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "ibc_channel")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.IbcChannelH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "ProcessingError":
				er := err.(*sdkutilities.ProcessingError)
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, NewIbcChannelProcessingErrorError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.IbcChannelResponse), nil
}

// NewIbcClientStateHandler creates a gRPC handler which serves the
// "sdk-utilities" service "ibc_client_state" endpoint.
func NewIbcClientStateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeIbcClientStateRequest, EncodeIbcClientStateResponse)
	}
	return h
}

// IbcClientState implements the "IbcClientState" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) IbcClientState(ctx context.Context, message *sdk_utilitiespb.IbcClientStateRequest) (*sdk_utilitiespb.IbcClientStateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "ibc_client_state")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.IbcClientStateH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "ProcessingError":
				er := err.(*sdkutilities.ProcessingError)
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, NewIbcClientStateProcessingErrorError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.IbcClientStateResponse), nil
}

// NewIbcConnectionHandler creates a gRPC handler which serves the
// "sdk-utilities" service "ibc_connection" endpoint.
func NewIbcConnectionHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeIbcConnectionRequest, EncodeIbcConnectionResponse)
	}
	return h
}

// IbcConnection implements the "IbcConnection" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) IbcConnection(ctx context.Context, message *sdk_utilitiespb.IbcConnectionRequest) (*sdk_utilitiespb.IbcConnectionResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "ibc_connection")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.IbcConnectionH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "ProcessingError":
				er := err.(*sdkutilities.ProcessingError)
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, NewIbcConnectionProcessingErrorError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.IbcConnectionResponse), nil
}

// NewIbcDenomTraceHandler creates a gRPC handler which serves the
// "sdk-utilities" service "ibc_denom_trace" endpoint.
func NewIbcDenomTraceHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeIbcDenomTraceRequest, EncodeIbcDenomTraceResponse)
	}
	return h
}

// IbcDenomTrace implements the "IbcDenomTrace" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) IbcDenomTrace(ctx context.Context, message *sdk_utilitiespb.IbcDenomTraceRequest) (*sdk_utilitiespb.IbcDenomTraceResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "ibc_denom_trace")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.IbcDenomTraceH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "ProcessingError":
				er := err.(*sdkutilities.ProcessingError)
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, NewIbcDenomTraceProcessingErrorError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.IbcDenomTraceResponse), nil
}

// NewUnbondingDelegationEndpointHandler creates a gRPC handler which serves
// the "sdk-utilities" service "unbondingDelegation" endpoint.
func NewUnbondingDelegationEndpointHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUnbondingDelegationEndpointRequest, EncodeUnbondingDelegationEndpointResponse)
	}
	return h
}

// UnbondingDelegationEndpoint implements the "UnbondingDelegationEndpoint"
// method in sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) UnbondingDelegationEndpoint(ctx context.Context, message *sdk_utilitiespb.UnbondingDelegationRequest) (*sdk_utilitiespb.UnbondingDelegationResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "unbondingDelegation")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.UnbondingDelegationEndpointH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "ProcessingError":
				er := err.(*sdkutilities.ProcessingError)
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, NewUnbondingDelegationProcessingErrorError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.UnbondingDelegationResponse), nil
}

// NewValidatorEndpointHandler creates a gRPC handler which serves the
// "sdk-utilities" service "validator" endpoint.
func NewValidatorEndpointHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeValidatorEndpointRequest, EncodeValidatorEndpointResponse)
	}
	return h
}

// ValidatorEndpoint implements the "ValidatorEndpoint" method in
// sdk_utilitiespb.SdkUtilitiesServer interface.
func (s *Server) ValidatorEndpoint(ctx context.Context, message *sdk_utilitiespb.ValidatorRequest) (*sdk_utilitiespb.ValidatorResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "validator")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sdk-utilities")
	resp, err := s.ValidatorEndpointH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "ProcessingError":
				er := err.(*sdkutilities.ProcessingError)
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, NewValidatorProcessingErrorError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sdk_utilitiespb.ValidatorResponse), nil
}

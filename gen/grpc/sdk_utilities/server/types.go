// Code generated by goa v3.5.2, DO NOT EDIT.
//
// sdk-utilities gRPC server types
//
// Command:
// $ goa gen github.com/allinbits/sdk-service-meta

package server

import (
	sdk_utilitiespb "github.com/allinbits/sdk-service-meta/gen/grpc/sdk_utilities/pb"
	sdkutilities "github.com/allinbits/sdk-service-meta/gen/sdk_utilities"
	goa "goa.design/goa/v3/pkg"
)

// NewSupplyPayload builds the payload of the "supply" endpoint of the
// "sdk-utilities" service from the gRPC request type.
func NewSupplyPayload(message *sdk_utilitiespb.SupplyRequest) *sdkutilities.SupplyPayload {
	v := &sdkutilities.SupplyPayload{
		ChainName: message.ChainName,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}
	return v
}

// NewSupplyResponse builds the gRPC response type from the result of the
// "supply" endpoint of the "sdk-utilities" service.
func NewSupplyResponse(result *sdkutilities.Supply2) *sdk_utilitiespb.SupplyResponse {
	message := &sdk_utilitiespb.SupplyResponse{}
	if result.Coins != nil {
		message.Coins = make([]*sdk_utilitiespb.Coin, len(result.Coins))
		for i, val := range result.Coins {
			message.Coins[i] = &sdk_utilitiespb.Coin{
				Denom:  val.Denom,
				Amount: val.Amount,
			}
		}
	}
	return message
}

// NewQueryTxPayload builds the payload of the "queryTx" endpoint of the
// "sdk-utilities" service from the gRPC request type.
func NewQueryTxPayload(message *sdk_utilitiespb.QueryTxRequest) *sdkutilities.QueryTxPayload {
	v := &sdkutilities.QueryTxPayload{
		ChainName: message.ChainName,
		Hash:      message.Hash,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}
	return v
}

// NewQueryTxResponse builds the gRPC response type from the result of the
// "queryTx" endpoint of the "sdk-utilities" service.
func NewQueryTxResponse(result []byte) *sdk_utilitiespb.QueryTxResponse {
	message := &sdk_utilitiespb.QueryTxResponse{}
	message.Field = result
	return message
}

// NewBroadcastTxPayload builds the payload of the "broadcastTx" endpoint of
// the "sdk-utilities" service from the gRPC request type.
func NewBroadcastTxPayload(message *sdk_utilitiespb.BroadcastTxRequest) *sdkutilities.BroadcastTxPayload {
	v := &sdkutilities.BroadcastTxPayload{
		ChainName: message.ChainName,
		TxBytes:   message.TxBytes,
	}
	if message.Port != 0 {
		portptr := int(message.Port)
		v.Port = &portptr
	}
	return v
}

// NewBroadcastTxResponse builds the gRPC response type from the result of the
// "broadcastTx" endpoint of the "sdk-utilities" service.
func NewBroadcastTxResponse(result *sdkutilities.TransactionResult) *sdk_utilitiespb.BroadcastTxResponse {
	message := &sdk_utilitiespb.BroadcastTxResponse{
		Hash: result.Hash,
	}
	return message
}

// NewTxMetadataPayload builds the payload of the "txMetadata" endpoint of the
// "sdk-utilities" service from the gRPC request type.
func NewTxMetadataPayload(message *sdk_utilitiespb.TxMetadataRequest) *sdkutilities.TxMetadataPayload {
	v := &sdkutilities.TxMetadataPayload{
		TxBytes: message.TxBytes,
	}
	return v
}

// NewTxMetadataResponse builds the gRPC response type from the result of the
// "txMetadata" endpoint of the "sdk-utilities" service.
func NewTxMetadataResponse(result *sdkutilities.TxMessagesMetadata) *sdk_utilitiespb.TxMetadataResponse {
	message := &sdk_utilitiespb.TxMetadataResponse{}
	if result.MessagesMetadata != nil {
		message.MessagesMetadata = make([]*sdk_utilitiespb.MsgMetadata, len(result.MessagesMetadata))
		for i, val := range result.MessagesMetadata {
			message.MessagesMetadata[i] = &sdk_utilitiespb.MsgMetadata{
				MsgType: val.MsgType,
			}
			if val.IbcTransferMetadata != nil {
				message.MessagesMetadata[i].IbcTransferMetadata = svcSdkutilitiesIBCTransferMetadataToSdkUtilitiespbIBCTransferMetadata(val.IbcTransferMetadata)
			}
		}
	}
	return message
}

// NewAuthPayload builds the payload of the "auth" endpoint of the
// "sdk-utilities" service from the gRPC request type.
func NewAuthPayload(message *sdk_utilitiespb.AuthRequest) *sdkutilities.AuthPayload {
	v := &sdkutilities.AuthPayload{}
	if message.Payload != nil {
		v.Payload = protobufSdkUtilitiespbTracePayloadToSdkutilitiesTracePayload(message.Payload)
	}
	return v
}

// NewAuthResponse builds the gRPC response type from the result of the "auth"
// endpoint of the "sdk-utilities" service.
func NewAuthResponse(result *sdkutilities.Auth2) *sdk_utilitiespb.AuthResponse {
	message := &sdk_utilitiespb.AuthResponse{}
	if result.Address != nil {
		message.Address = *result.Address
	}
	if result.SequenceNumber != nil {
		message.SequenceNumber = *result.SequenceNumber
	}
	if result.AccountNumber != nil {
		message.AccountNumber = *result.AccountNumber
	}
	return message
}

// NewBankPayload builds the payload of the "bank" endpoint of the
// "sdk-utilities" service from the gRPC request type.
func NewBankPayload(message *sdk_utilitiespb.BankRequest) *sdkutilities.BankPayload {
	v := &sdkutilities.BankPayload{}
	if message.Payload != nil {
		v.Payload = protobufSdkUtilitiespbTracePayloadToSdkutilitiesTracePayload(message.Payload)
	}
	return v
}

// NewBankResponse builds the gRPC response type from the result of the "bank"
// endpoint of the "sdk-utilities" service.
func NewBankResponse(result []*sdkutilities.Balance) *sdk_utilitiespb.BankResponse {
	message := &sdk_utilitiespb.BankResponse{}
	message.Field = make([]*sdk_utilitiespb.Balance, len(result))
	for i, val := range result {
		message.Field[i] = &sdk_utilitiespb.Balance{
			Address: val.Address,
			Amount:  val.Amount,
			Denom:   val.Denom,
		}
	}
	return message
}

// NewDelegationPayload builds the payload of the "delegation" endpoint of the
// "sdk-utilities" service from the gRPC request type.
func NewDelegationPayload(message *sdk_utilitiespb.DelegationRequest) *sdkutilities.DelegationPayload {
	v := &sdkutilities.DelegationPayload{}
	if message.Payload != nil {
		v.Payload = protobufSdkUtilitiespbTracePayloadToSdkutilitiesTracePayload(message.Payload)
	}
	return v
}

// NewDelegationResponse builds the gRPC response type from the result of the
// "delegation" endpoint of the "sdk-utilities" service.
func NewDelegationResponse(result *sdkutilities.Delegation2) *sdk_utilitiespb.DelegationResponse {
	message := &sdk_utilitiespb.DelegationResponse{}
	if result.Delegator != nil {
		message.Delegator = *result.Delegator
	}
	if result.Validator != nil {
		message.Validator = *result.Validator
	}
	if result.Amount != nil {
		message.Amount = *result.Amount
	}
	return message
}

// NewIbcChannelPayload builds the payload of the "ibc_channel" endpoint of the
// "sdk-utilities" service from the gRPC request type.
func NewIbcChannelPayload(message *sdk_utilitiespb.IbcChannelRequest) *sdkutilities.IbcChannelPayload {
	v := &sdkutilities.IbcChannelPayload{}
	if message.Payload != nil {
		v.Payload = protobufSdkUtilitiespbTracePayloadToSdkutilitiesTracePayload(message.Payload)
	}
	return v
}

// NewIbcChannelResponse builds the gRPC response type from the result of the
// "ibc_channel" endpoint of the "sdk-utilities" service.
func NewIbcChannelResponse(result *sdkutilities.IBCChannel) *sdk_utilitiespb.IbcChannelResponse {
	message := &sdk_utilitiespb.IbcChannelResponse{}
	if result.ChannelID != nil {
		message.ChannelId = *result.ChannelID
	}
	if result.CounterChannelID != nil {
		message.CounterChannelId = *result.CounterChannelID
	}
	if result.Port != nil {
		message.Port = *result.Port
	}
	if result.State != nil {
		message.State = *result.State
	}
	if result.Hops != nil {
		message.Hops = make([]string, len(result.Hops))
		for i, val := range result.Hops {
			message.Hops[i] = val
		}
	}
	return message
}

// NewIbcClientStatePayload builds the payload of the "ibc_client_state"
// endpoint of the "sdk-utilities" service from the gRPC request type.
func NewIbcClientStatePayload(message *sdk_utilitiespb.IbcClientStateRequest) *sdkutilities.IbcClientStatePayload {
	v := &sdkutilities.IbcClientStatePayload{}
	if message.Payload != nil {
		v.Payload = protobufSdkUtilitiespbTracePayloadToSdkutilitiesTracePayload(message.Payload)
	}
	return v
}

// NewIbcClientStateResponse builds the gRPC response type from the result of
// the "ibc_client_state" endpoint of the "sdk-utilities" service.
func NewIbcClientStateResponse(result *sdkutilities.IBCClientState) *sdk_utilitiespb.IbcClientStateResponse {
	message := &sdk_utilitiespb.IbcClientStateResponse{}
	if result.ChainID != nil {
		message.ChainId = *result.ChainID
	}
	if result.ClientID != nil {
		message.ClientId = *result.ClientID
	}
	if result.LatestHeight != nil {
		message.LatestHeight = *result.LatestHeight
	}
	if result.TrustingPeriod != nil {
		message.TrustingPeriod = *result.TrustingPeriod
	}
	return message
}

// NewIbcConnectionPayload builds the payload of the "ibc_connection" endpoint
// of the "sdk-utilities" service from the gRPC request type.
func NewIbcConnectionPayload(message *sdk_utilitiespb.IbcConnectionRequest) *sdkutilities.IbcConnectionPayload {
	v := &sdkutilities.IbcConnectionPayload{}
	if message.Payload != nil {
		v.Payload = protobufSdkUtilitiespbTracePayloadToSdkutilitiesTracePayload(message.Payload)
	}
	return v
}

// NewIbcConnectionResponse builds the gRPC response type from the result of
// the "ibc_connection" endpoint of the "sdk-utilities" service.
func NewIbcConnectionResponse(result *sdkutilities.IBCConnection) *sdk_utilitiespb.IbcConnectionResponse {
	message := &sdk_utilitiespb.IbcConnectionResponse{}
	if result.ConnectionID != nil {
		message.ConnectionId = *result.ConnectionID
	}
	if result.ClientID != nil {
		message.ClientId = *result.ClientID
	}
	if result.State != nil {
		message.State = *result.State
	}
	if result.CounterConnectionID != nil {
		message.CounterConnectionId = *result.CounterConnectionID
	}
	if result.CounterClientID != nil {
		message.CounterClientId = *result.CounterClientID
	}
	return message
}

// NewIbcDenomTracePayload builds the payload of the "ibc_denom_trace" endpoint
// of the "sdk-utilities" service from the gRPC request type.
func NewIbcDenomTracePayload(message *sdk_utilitiespb.IbcDenomTraceRequest) *sdkutilities.IbcDenomTracePayload {
	v := &sdkutilities.IbcDenomTracePayload{}
	if message.Payload != nil {
		v.Payload = protobufSdkUtilitiespbTracePayloadToSdkutilitiesTracePayload(message.Payload)
	}
	return v
}

// NewIbcDenomTraceResponse builds the gRPC response type from the result of
// the "ibc_denom_trace" endpoint of the "sdk-utilities" service.
func NewIbcDenomTraceResponse(result *sdkutilities.IBCDenomTrace) *sdk_utilitiespb.IbcDenomTraceResponse {
	message := &sdk_utilitiespb.IbcDenomTraceResponse{}
	if result.Path != nil {
		message.Path = *result.Path
	}
	if result.BaseDenom != nil {
		message.BaseDenom = *result.BaseDenom
	}
	if result.Hash != nil {
		message.Hash = *result.Hash
	}
	return message
}

// ValidateBroadcastTxRequest runs the validations defined on
// BroadcastTxRequest.
func ValidateBroadcastTxRequest(message *sdk_utilitiespb.BroadcastTxRequest) (err error) {
	if message.TxBytes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("txBytes", "message"))
	}
	return
}

// ValidateTxMetadataRequest runs the validations defined on TxMetadataRequest.
func ValidateTxMetadataRequest(message *sdk_utilitiespb.TxMetadataRequest) (err error) {
	if message.TxBytes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("txBytes", "message"))
	}
	return
}

// svcSdkutilitiesIBCTransferMetadataToSdkUtilitiespbIBCTransferMetadata builds
// a value of type *sdk_utilitiespb.IBCTransferMetadata from a value of type
// *sdkutilities.IBCTransferMetadata.
func svcSdkutilitiesIBCTransferMetadataToSdkUtilitiespbIBCTransferMetadata(v *sdkutilities.IBCTransferMetadata) *sdk_utilitiespb.IBCTransferMetadata {
	if v == nil {
		return nil
	}
	res := &sdk_utilitiespb.IBCTransferMetadata{}
	if v.SourcePort != nil {
		res.SourcePort = *v.SourcePort
	}
	if v.SourceChannel != nil {
		res.SourceChannel = *v.SourceChannel
	}
	if v.Sender != nil {
		res.Sender = *v.Sender
	}
	if v.Receiver != nil {
		res.Receiver = *v.Receiver
	}
	if v.TiemoutTimestamp != nil {
		res.TiemoutTimestamp = *v.TiemoutTimestamp
	}
	if v.Token != nil {
		res.Token = svcSdkutilitiesCoinToSdkUtilitiespbCoin(v.Token)
	}
	if v.TimeoutHeight != nil {
		res.TimeoutHeight = svcSdkutilitiesIBCHeightToSdkUtilitiespbIBCHeight(v.TimeoutHeight)
	}

	return res
}

// svcSdkutilitiesCoinToSdkUtilitiespbCoin builds a value of type
// *sdk_utilitiespb.Coin from a value of type *sdkutilities.Coin.
func svcSdkutilitiesCoinToSdkUtilitiespbCoin(v *sdkutilities.Coin) *sdk_utilitiespb.Coin {
	if v == nil {
		return nil
	}
	res := &sdk_utilitiespb.Coin{
		Denom:  v.Denom,
		Amount: v.Amount,
	}

	return res
}

// svcSdkutilitiesIBCHeightToSdkUtilitiespbIBCHeight builds a value of type
// *sdk_utilitiespb.IBCHeight from a value of type *sdkutilities.IBCHeight.
func svcSdkutilitiesIBCHeightToSdkUtilitiespbIBCHeight(v *sdkutilities.IBCHeight) *sdk_utilitiespb.IBCHeight {
	if v == nil {
		return nil
	}
	res := &sdk_utilitiespb.IBCHeight{}
	if v.RevisionNumber != nil {
		res.RevisionNumber = *v.RevisionNumber
	}
	if v.RevisionHeight != nil {
		res.RevisionHeight = *v.RevisionHeight
	}

	return res
}

// protobufSdkUtilitiespbIBCTransferMetadataToSdkutilitiesIBCTransferMetadata
// builds a value of type *sdkutilities.IBCTransferMetadata from a value of
// type *sdk_utilitiespb.IBCTransferMetadata.
func protobufSdkUtilitiespbIBCTransferMetadataToSdkutilitiesIBCTransferMetadata(v *sdk_utilitiespb.IBCTransferMetadata) *sdkutilities.IBCTransferMetadata {
	if v == nil {
		return nil
	}
	res := &sdkutilities.IBCTransferMetadata{}
	if v.SourcePort != "" {
		res.SourcePort = &v.SourcePort
	}
	if v.SourceChannel != "" {
		res.SourceChannel = &v.SourceChannel
	}
	if v.Sender != "" {
		res.Sender = &v.Sender
	}
	if v.Receiver != "" {
		res.Receiver = &v.Receiver
	}
	if v.TiemoutTimestamp != 0 {
		res.TiemoutTimestamp = &v.TiemoutTimestamp
	}
	if v.Token != nil {
		res.Token = protobufSdkUtilitiespbCoinToSdkutilitiesCoin(v.Token)
	}
	if v.TimeoutHeight != nil {
		res.TimeoutHeight = protobufSdkUtilitiespbIBCHeightToSdkutilitiesIBCHeight(v.TimeoutHeight)
	}

	return res
}

// protobufSdkUtilitiespbCoinToSdkutilitiesCoin builds a value of type
// *sdkutilities.Coin from a value of type *sdk_utilitiespb.Coin.
func protobufSdkUtilitiespbCoinToSdkutilitiesCoin(v *sdk_utilitiespb.Coin) *sdkutilities.Coin {
	if v == nil {
		return nil
	}
	res := &sdkutilities.Coin{
		Denom:  v.Denom,
		Amount: v.Amount,
	}

	return res
}

// protobufSdkUtilitiespbIBCHeightToSdkutilitiesIBCHeight builds a value of
// type *sdkutilities.IBCHeight from a value of type *sdk_utilitiespb.IBCHeight.
func protobufSdkUtilitiespbIBCHeightToSdkutilitiesIBCHeight(v *sdk_utilitiespb.IBCHeight) *sdkutilities.IBCHeight {
	if v == nil {
		return nil
	}
	res := &sdkutilities.IBCHeight{}
	if v.RevisionNumber != 0 {
		res.RevisionNumber = &v.RevisionNumber
	}
	if v.RevisionHeight != 0 {
		res.RevisionHeight = &v.RevisionHeight
	}

	return res
}

// protobufSdkUtilitiespbTracePayloadToSdkutilitiesTracePayload builds a value
// of type *sdkutilities.TracePayload from a value of type
// *sdk_utilitiespb.TracePayload.
func protobufSdkUtilitiespbTracePayloadToSdkutilitiesTracePayload(v *sdk_utilitiespb.TracePayload) *sdkutilities.TracePayload {
	if v == nil {
		return nil
	}
	res := &sdkutilities.TracePayload{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// svcSdkutilitiesTracePayloadToSdkUtilitiespbTracePayload builds a value of
// type *sdk_utilitiespb.TracePayload from a value of type
// *sdkutilities.TracePayload.
func svcSdkutilitiesTracePayloadToSdkUtilitiespbTracePayload(v *sdkutilities.TracePayload) *sdk_utilitiespb.TracePayload {
	if v == nil {
		return nil
	}
	res := &sdk_utilitiespb.TracePayload{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

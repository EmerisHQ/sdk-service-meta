// Code generated by goa v3.5.2, DO NOT EDIT.
//
// sdk-utilities service
//
// Command:
// $ goa gen github.com/allinbits/sdk-service-meta

package sdkutilities

import (
	"context"
)

// sdk-utilities performs Cosmos SDK-related operations
type Service interface {
	// Supply implements supply.
	Supply(context.Context, *SupplyPayload) (res *Supply2, err error)
	// QueryTx implements queryTx.
	QueryTx(context.Context, *QueryTxPayload) (res []byte, err error)
	// BroadcastTx implements broadcastTx.
	BroadcastTx(context.Context, *BroadcastTxPayload) (res *TransactionResult, err error)
	// TxMetadata implements txMetadata.
	TxMetadata(context.Context, *TxMetadataPayload) (res *TxMessagesMetadata, err error)
	// Block implements block.
	Block(context.Context, *BlockPayload) (res *BlockData, err error)
	// LiquidityParams implements liquidityParams.
	LiquidityParams(context.Context, *LiquidityParamsPayload) (res *LiquidityParams2, err error)
	// LiquidityPools implements liquidityPools.
	LiquidityPools(context.Context, *LiquidityPoolsPayload) (res *LiquidityPools2, err error)
	// MintInflation implements mintInflation.
	MintInflation(context.Context, *MintInflationPayload) (res *MintInflation2, err error)
	// MintParams implements mintParams.
	MintParams(context.Context, *MintParamsPayload) (res *MintParams2, err error)
	// MintAnnualProvision implements mintAnnualProvision.
	MintAnnualProvision(context.Context, *MintAnnualProvisionPayload) (res *MintAnnualProvision2, err error)
	// Auth implements auth.
	AuthEndpoint(context.Context, *AuthPayload) (res []*Auth, err error)
	// Bank implements bank.
	Bank(context.Context, *BankPayload) (res []*Balance, err error)
	// Delegation implements delegation.
	DelegationEndpoint(context.Context, *DelegationPayload) (res []*Delegation, err error)
	// IbcChannel implements ibc_channel.
	IbcChannel(context.Context, *IbcChannelPayload) (res []*IBCChannel, err error)
	// IbcClientState implements ibc_client_state.
	IbcClientState(context.Context, *IbcClientStatePayload) (res []*IBCClientState, err error)
	// IbcConnection implements ibc_connection.
	IbcConnection(context.Context, *IbcConnectionPayload) (res []*IBCConnection, err error)
	// IbcDenomTrace implements ibc_denom_trace.
	IbcDenomTrace(context.Context, *IbcDenomTracePayload) (res []*IBCDenomTrace, err error)
	// UnbondingDelegation implements unbondingDelegation.
	UnbondingDelegationEndpoint(context.Context, *UnbondingDelegationPayload) (res []*UnbondingDelegation, err error)
	// Validator implements validator.
	ValidatorEndpoint(context.Context, *ValidatorPayload) (res []*Validator, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "sdk-utilities"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [19]string{"supply", "queryTx", "broadcastTx", "txMetadata", "block", "liquidityParams", "liquidityPools", "mintInflation", "mintParams", "mintAnnualProvision", "auth", "bank", "delegation", "ibc_channel", "ibc_client_state", "ibc_connection", "ibc_denom_trace", "unbondingDelegation", "validator"}

// SupplyPayload is the payload type of the sdk-utilities service supply method.
type SupplyPayload struct {
	// Chain to get data from
	ChainName string
	// gRPC port for selected chain, defaults to 9090
	Port *int
}

// Supply2 is the result type of the sdk-utilities service supply method.
type Supply2 struct {
	Coins []*Coin
}

// QueryTxPayload is the payload type of the sdk-utilities service queryTx
// method.
type QueryTxPayload struct {
	// Chain to get data from
	ChainName string
	// gRPC port for selected chain, defaults to 9090
	Port *int
	// Transaction hash to query
	Hash string
}

// BroadcastTxPayload is the payload type of the sdk-utilities service
// broadcastTx method.
type BroadcastTxPayload struct {
	// Chain to get data from
	ChainName string
	// gRPC port for selected chain, defaults to 9090
	Port *int
	// Transaction bytes
	TxBytes []byte
}

// TransactionResult is the result type of the sdk-utilities service
// broadcastTx method.
type TransactionResult struct {
	Hash string
}

// TxMetadataPayload is the payload type of the sdk-utilities service
// txMetadata method.
type TxMetadataPayload struct {
	// Transaction bytes
	TxBytes []byte
}

// TxMessagesMetadata is the result type of the sdk-utilities service
// txMetadata method.
type TxMessagesMetadata struct {
	MessagesMetadata []*MsgMetadata
}

// BlockPayload is the payload type of the sdk-utilities service block method.
type BlockPayload struct {
	// Height of the block to query
	Height int64
}

// BlockData is the result type of the sdk-utilities service block method.
type BlockData struct {
	Height int64
	Block  []byte
}

// LiquidityParamsPayload is the payload type of the sdk-utilities service
// liquidityParams method.
type LiquidityParamsPayload struct {
	// Chain to get data from
	ChainName string
	// gRPC port for selected chain, defaults to 9090
	Port *int
}

// LiquidityParams2 is the result type of the sdk-utilities service
// liquidityParams method.
type LiquidityParams2 struct {
	LiquidityParams []byte
}

// LiquidityPoolsPayload is the payload type of the sdk-utilities service
// liquidityPools method.
type LiquidityPoolsPayload struct {
	// Chain to get data from
	ChainName string
	// gRPC port for selected chain, defaults to 9090
	Port *int
}

// LiquidityPools2 is the result type of the sdk-utilities service
// liquidityPools method.
type LiquidityPools2 struct {
	LiquidityPools []byte
}

// MintInflationPayload is the payload type of the sdk-utilities service
// mintInflation method.
type MintInflationPayload struct {
	// Chain to get data from
	ChainName string
	// gRPC port for selected chain, defaults to 9090
	Port *int
}

// MintInflation2 is the result type of the sdk-utilities service mintInflation
// method.
type MintInflation2 struct {
	MintInflation []byte
}

// MintParamsPayload is the payload type of the sdk-utilities service
// mintParams method.
type MintParamsPayload struct {
	// Chain to get data from
	ChainName string
	// gRPC port for selected chain, defaults to 9090
	Port *int
}

// MintParams2 is the result type of the sdk-utilities service mintParams
// method.
type MintParams2 struct {
	MintParams []byte
}

// MintAnnualProvisionPayload is the payload type of the sdk-utilities service
// mintAnnualProvision method.
type MintAnnualProvisionPayload struct {
	// Chain to get data from
	ChainName string
	// gRPC port for selected chain, defaults to 9090
	Port *int
}

// MintAnnualProvision2 is the result type of the sdk-utilities service
// mintAnnualProvision method.
type MintAnnualProvision2 struct {
	MintAnnualProvision []byte
}

// AuthPayload is the payload type of the sdk-utilities service auth method.
type AuthPayload struct {
	Payload []*TracePayload
}

// BankPayload is the payload type of the sdk-utilities service bank method.
type BankPayload struct {
	Payload []*TracePayload
}

// DelegationPayload is the payload type of the sdk-utilities service
// delegation method.
type DelegationPayload struct {
	Payload []*TracePayload
}

// IbcChannelPayload is the payload type of the sdk-utilities service
// ibc_channel method.
type IbcChannelPayload struct {
	Payload []*TracePayload
}

// IbcClientStatePayload is the payload type of the sdk-utilities service
// ibc_client_state method.
type IbcClientStatePayload struct {
	Payload []*TracePayload
}

// IbcConnectionPayload is the payload type of the sdk-utilities service
// ibc_connection method.
type IbcConnectionPayload struct {
	Payload []*TracePayload
}

// IbcDenomTracePayload is the payload type of the sdk-utilities service
// ibc_denom_trace method.
type IbcDenomTracePayload struct {
	Payload []*TracePayload
}

// UnbondingDelegationPayload is the payload type of the sdk-utilities service
// unbondingDelegation method.
type UnbondingDelegationPayload struct {
	Payload []*TracePayload
}

// ValidatorPayload is the payload type of the sdk-utilities service validator
// method.
type ValidatorPayload struct {
	Payload []*TracePayload
}

// SDK service representation of a Cosmos SDK types.Coin
type Coin struct {
	Denom  string
	Amount string
}

// Metadata related to some message contained in a transaction
type MsgMetadata struct {
	MsgType             string
	IbcTransferMetadata *IBCTransferMetadata
}

// Metadata related to an IBC Transfer
type IBCTransferMetadata struct {
	SourcePort       *string
	SourceChannel    *string
	Token            *Coin
	Sender           *string
	Receiver         *string
	TimeoutHeight    *IBCHeight
	TiemoutTimestamp *uint64
}

// The plain type associated with ibc-go types.Height struct
type IBCHeight struct {
	RevisionNumber *uint64
	RevisionHeight *uint64
}

// Data read off Cosmos SDK tracing facility
type TracePayload struct {
	Key           []byte
	Value         []byte
	OperationType *string
}

// Account as unmarshaled from trace bytes
type Auth struct {
	Address        string
	SequenceNumber uint64
	AccountNumber  uint64
}

// Balance of a given address as unmarshaled from trace bytes
type Balance struct {
	Address string
	Amount  string
	Denom   string
}

// Staking delegation as unmarshaled from trace bytes
type Delegation struct {
	Delegator string
	Validator string
	Amount    string
	Type      string
}

// IBC channel as unmarshaled from trace bytes
type IBCChannel struct {
	ChannelID        string
	CounterChannelID string
	Hops             []string
	Port             string
	State            int32
}

// IBC client state as unmarshaled from trace bytes
type IBCClientState struct {
	ChainID        string
	ClientID       string
	LatestHeight   uint64
	TrustingPeriod int64
}

// IBC connection as unmarshaled from trace bytes
type IBCConnection struct {
	ConnectionID        string
	ClientID            string
	State               string
	CounterConnectionID string
	CounterClientID     string
}

// IBC denomination trace as unmarshaled from trace bytes
type IBCDenomTrace struct {
	Path      string
	BaseDenom string
	Hash      string
}

// Staking unbondingDelegation as unmarshaled from trace bytes
type UnbondingDelegation struct {
	Delegator string
	Validator string
	Type      string
	Entries   []*UnbondingDelegationEntry
}

// A bonded user unbonding delegation entry
type UnbondingDelegationEntry struct {
	Balance        string
	InitialBalance string
	CreationHeight int64
	CompletionTime int64
}

// Validator struct as unmarshaled from trace bytes
type Validator struct {
	OperatorAddress      string
	ConsensusPubKeyType  string
	ConsensusPubKeyValue []byte
	Jailed               bool
	Status               int32
	Tokens               string
	DelegatorShares      string
	Moniker              string
	Identity             string
	Website              string
	SecurityContact      string
	Details              string
	UnbondingHeight      int64
	UnbondingTime        int64
	CommissionRate       string
	MaxRate              string
	MaxChangeRate        string
	UpdateTime           string
	MinSelfDelegation    string
	Type                 string
}

// ProcessingError is a set of indexed error strings, where the index matches a
// given payload index
type ProcessingError struct {
	// Name of error
	Name *string
	// Code of error
	Code   *int
	Errors []*ErrorObject
}

type ErrorObject struct {
	Value        string
	PayloadIndex int
}

// Error returns an error description.
func (e *ProcessingError) Error() string {
	return "ProcessingError is a set of indexed error strings, where the index matches a given payload index"
}

// ErrorName returns "ProcessingError".
func (e *ProcessingError) ErrorName() string {
	return "ProcessingError"
}

// Error returns an error description.
func (e *ErrorObject) Error() string {
	return ""
}

// ErrorName returns "ErrorObject".
func (e *ErrorObject) ErrorName() string {
	return "ErrorObject"
}
